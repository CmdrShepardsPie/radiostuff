"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("module-alias/register");
const fs_helpers_1 = require("@helpers/fs-helpers");
const log_helpers_1 = require("@helpers/log-helpers");
const log = log_helpers_1.createLog('Generate Frequencies');
let frequencies = [];
const range2m = [
    // Channels
    { start: 146.4, end: 146.595, steps: [0.015], name: `FM Voice` },
    { start: 147.42, end: 147.585, steps: [0.015], name: `FM Voice` },
    // Range
    { start: 144.9, end: 145.1, steps: [0.015], name: `Weak Signal, FM, Digital/Packet` },
    { start: 145.5, end: 145.8, steps: [0.015], name: `Miscellaneous and Experimental Modes` },
];
const range125m = [
    // Channels
    { start: 223.4, end: 223.52, steps: [0.020], name: `FM Voice` },
    { start: 222.16, end: 222.24, steps: [0.020], name: `Mixed Mode` },
    { start: 223.72, end: 223.84, steps: [0.020], name: `Mixed Mode` },
    // Range
    { start: 223.53, end: 223.63, steps: [0.020], name: `Digital/Packet` },
];
const range70cm = [
    // Channels
    { start: 440.7, end: 441.3, steps: [0.025], name: `Mixed Mode` },
    { start: 445.7, end: 446.275, steps: [0.025], name: `FM Voice` },
    { start: 446.2, end: 446.3, steps: [0.0125], name: `Digital Voice Narrowband` },
    // Range
    { start: 434.5, end: 435, steps: [0.025], name: `Mixed Mode Digital and Voice` },
    { start: 439.5, end: 440, steps: [0.025], name: `Mixed Mode Digital and Voice` },
];
[...range2m, ...range125m, ...range70cm].forEach((range) => {
    range.steps.forEach((step) => {
        for (let i = range.start; i <= range.end; i += step) {
            i = Math.round(i * 100000) / 100000;
            if (!frequencies.find((f) => f.Frequency === i)) {
                frequencies.push({ Frequency: i, Name: range.name });
            }
        }
    });
});
frequencies = frequencies.sort((a, b) => (a.Frequency || 0) - (b.Frequency || 0));
log(frequencies, frequencies.length);
fs_helpers_1.writeFileAsync(`./data/frequencies.json`, JSON.stringify(frequencies, null, 2))
    .then((r) => log(`Done`, r));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtZnJlcXVlbmNpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2VuZXJhdGUtZnJlcXVlbmNpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBK0I7QUFFL0Isb0RBQXFEO0FBQ3JELHNEQUFpRDtBQUlqRCxNQUFNLEdBQUcsR0FBNEIsdUJBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3ZFLElBQUksV0FBVyxHQUFtQixFQUFFLENBQUM7QUFDckMsTUFBTSxPQUFPLEdBQTJCO0lBQ3RDLFdBQVc7SUFDWCxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQ2hFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7SUFFakUsUUFBUTtJQUNSLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxpQ0FBaUMsRUFBRTtJQUNyRixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsc0NBQXNDLEVBQUU7Q0FDM0YsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUEyQjtJQUN4QyxXQUFXO0lBQ1gsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtJQUMvRCxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFL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ZWdpc3Rlcic7XHJcblxyXG5pbXBvcnQgeyB3cml0ZUZpbGVBc3luYyB9IGZyb20gJ0BoZWxwZXJzL2ZzLWhlbHBlcnMnO1xyXG5pbXBvcnQgeyBjcmVhdGVMb2cgfSBmcm9tICdAaGVscGVycy9sb2ctaGVscGVycyc7XHJcbmltcG9ydCB7IElGcmVxdWVuY3lEZWZpbml0aW9uIH0gZnJvbSAnQGludGVyZmFjZXMvaS1mcmVxdWVuY3ktZGVmaW5pdGlvbic7XHJcbmltcG9ydCB7IElSZXBlYXRlclJhdyB9IGZyb20gJ0BpbnRlcmZhY2VzL2ktcmVwZWF0ZXItcmF3JztcclxuXHJcbmNvbnN0IGxvZzogKC4uLm1zZzogYW55W10pID0+IHZvaWQgPSBjcmVhdGVMb2coJ0dlbmVyYXRlIEZyZXF1ZW5jaWVzJyk7XHJcbmxldCBmcmVxdWVuY2llczogSVJlcGVhdGVyUmF3W10gPSBbXTtcclxuY29uc3QgcmFuZ2UybTogSUZyZXF1ZW5jeURlZmluaXRpb25bXSA9IFtcclxuICAvLyBDaGFubmVsc1xyXG4gIHsgc3RhcnQ6IDE0Ni40LCBlbmQ6IDE0Ni41OTUsIHN0ZXBzOiBbMC4wMTVdLCBuYW1lOiBgRk0gVm9pY2VgIH0sXHJcbiAgeyBzdGFydDogMTQ3LjQyLCBlbmQ6IDE0Ny41ODUsIHN0ZXBzOiBbMC4wMTVdLCBuYW1lOiBgRk0gVm9pY2VgIH0sXHJcblxyXG4gIC8vIFJhbmdlXHJcbiAgeyBzdGFydDogMTQ0LjksIGVuZDogMTQ1LjEsIHN0ZXBzOiBbMC4wMTVdLCBuYW1lOiBgV2VhayBTaWduYWwsIEZNLCBEaWdpdGFsL1BhY2tldGAgfSxcclxuICB7IHN0YXJ0OiAxNDUuNSwgZW5kOiAxNDUuOCwgc3RlcHM6IFswLjAxNV0sIG5hbWU6IGBNaXNjZWxsYW5lb3VzIGFuZCBFeHBlcmltZW50YWwgTW9kZXNgIH0sXHJcbl07XHJcblxyXG5jb25zdCByYW5nZTEyNW06IElGcmVxdWVuY3lEZWZpbml0aW9uW10gPSBbXHJcbiAgLy8gQ2hhbm5lbHNcclxuICB7IHN0YXJ0OiAyMjMuNCwgZW5kOiAyMjMuNTIsIHN0ZXBzOiBbMC4wMjBdLCBuYW1lOiBgRk0gVm9pY2VgIH0sXHJcbiAgeyBzdGFydDogMjIyLjE2LCBlbmQ6IDIyMi4yNCwgc3RlcHM6IFswLjAyMF0sIG5hbWU6IGBNaXhlZCBNb2RlYCB9LFxyXG4gIHsgc3RhcnQ6IDIyMy43MiwgZW5kOiAyMjMuODQsIHN0ZXBzOiBbMC4wMjBdLCBuYW1lOiBgTWl4ZWQgTW9kZWAgfSxcclxuXHJcbiAgLy8gUmFuZ2VcclxuICB7IHN0YXJ0OiAyMjMuNTMsIGVuZDogMjIzLjYzLCBzdGVwczogWzAuMDIwXSwgbmFtZTogYERpZ2l0YWwvUGFja2V0YCB9LFxyXG5dO1xyXG5cclxuY29uc3QgcmFuZ2U3MGNtOiBJRnJlcXVlbmN5RGVmaW5pdGlvbltdID0gW1xyXG4gIC8vIENoYW5uZWxzXHJcbiAgeyBzdGFydDogNDQwLjcsIGVuZDogNDQxLjMsIHN0ZXBzOiBbMC4wMjVdLCBuYW1lOiBgTWl4ZWQgTW9kZWAgfSxcclxuICB7IHN0YXJ0OiA0NDUuNywgZW5kOiA0NDYuMjc1LCBzdGVwczogWzAuMDI1XSwgbmFtZTogYEZNIFZvaWNlYCB9LFxyXG4gIHsgc3RhcnQ6IDQ0Ni4yLCBlbmQ6IDQ0Ni4zLCBzdGVwczogWzAuMDEyNV0sIG5hbWU6IGBEaWdpdGFsIFZvaWNlIE5hcnJvd2JhbmRgIH0sXHJcblxyXG4gIC8vIFJhbmdlXHJcbiAgeyBzdGFydDogNDM0LjUsIGVuZDogNDM1LCBzdGVwczogWzAuMDI1XSwgbmFtZTogYE1peGVkIE1vZGUgRGlnaXRhbCBhbmQgVm9pY2VgIH0sXHJcbiAgeyBzdGFydDogNDM5LjUsIGVuZDogNDQwLCBzdGVwczogWzAuMDI1XSwgbmFtZTogYE1peGVkIE1vZGUgRGlnaXRhbCBhbmQgVm9pY2VgIH0sXHJcbl07XHJcblxyXG5bLi4ucmFuZ2UybSwgLi4ucmFuZ2UxMjVtLCAuLi5yYW5nZTcwY21dLmZvckVhY2goKHJhbmdlOiBJRnJlcXVlbmN5RGVmaW5pdGlvbikgPT4ge1xyXG4gIHJhbmdlLnN0ZXBzLmZvckVhY2goKHN0ZXA6IG51bWJlcikgPT4ge1xyXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gcmFuZ2Uuc3RhcnQ7IGkgPD0gcmFuZ2UuZW5kOyBpICs9IHN0ZXApIHtcclxuICAgICAgaSA9IE1hdGgucm91bmQoaSAqIDEwMDAwMCkgLyAxMDAwMDA7XHJcbiAgICAgIGlmICghZnJlcXVlbmNpZXMuZmluZCgoZjogSVJlcGVhdGVyUmF3KSA9PiBmLkZyZXF1ZW5jeSA9PT0gaSkpIHtcclxuICAgICAgICBmcmVxdWVuY2llcy5wdXNoKHsgRnJlcXVlbmN5OiBpLCBOYW1lOiByYW5nZS5uYW1lIH0gYXMgYW55KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuZnJlcXVlbmNpZXMgPSBmcmVxdWVuY2llcy5zb3J0KChhOiBJUmVwZWF0ZXJSYXcsIGI6IElSZXBlYXRlclJhdykgPT4gKGEuRnJlcXVlbmN5IHx8IDApIC0gKGIuRnJlcXVlbmN5IHx8IDApKTtcclxubG9nKGZyZXF1ZW5jaWVzLCBmcmVxdWVuY2llcy5sZW5ndGgpO1xyXG53cml0ZUZpbGVBc3luYyhgLi9kYXRhL2ZyZXF1ZW5jaWVzLmpzb25gLCBKU09OLnN0cmluZ2lmeShmcmVxdWVuY2llcywgbnVsbCwgMikpXHJcbiAgLnRoZW4oKHI6IHVua25vd24pID0+IGxvZyhgRG9uZWAsIHIpKTtcclxuIl19