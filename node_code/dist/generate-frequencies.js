"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("module-alias/register");
const fs_helpers_1 = require("@helpers/fs-helpers");
const numbers_1 = require("@helpers/numbers");
const range2m = [
    // Channels
    { start: 146.4, end: 146.595, steps: [0.015], name: `FM Voice` },
    { start: 147.42, end: 147.585, steps: [0.015], name: `FM Voice` },
    // Range
    { start: 144.9, end: 145.1, steps: [0.015], name: `Weak Signal, FM, Digital/Packet` },
    { start: 145.5, end: 145.8, steps: [0.015], name: `Miscellaneous and Experimental Modes` },
];
const range125m = [
    // Channels
    { start: 223.4, end: 223.52, steps: [0.020], name: `FM Voice` },
    { start: 222.16, end: 222.24, steps: [0.020], name: `Mixed Mode` },
    { start: 223.72, end: 223.84, steps: [0.020], name: `Mixed Mode` },
    // Range
    { start: 223.53, end: 223.63, steps: [0.020], name: `Digital/Packet` },
];
const range70cm = [
    // Channels
    { start: 440.7, end: 441.3, steps: [0.025], name: `Mixed Mode` },
    { start: 445.7, end: 446.275, steps: [0.025], name: `FM Voice` },
    { start: 446.2, end: 446.3, steps: [0.0125], name: `Digital Voice Narrowband` },
    // Range
    { start: 434.5, end: 435, steps: [0.025], name: `Mixed Mode Digital and Voice` },
    { start: 439.5, end: 440, steps: [0.025], name: `Mixed Mode Digital and Voice` },
];
let frequencies = [];
const existingFrequencies = {};
const points = 5;
[...range2m, ...range125m, ...range70cm].forEach((range) => {
    range.steps.forEach((s) => {
        const step = numbers_1.powAndFix(s, points);
        const start = numbers_1.powAndFix(range.start, points);
        const end = numbers_1.powAndFix(range.end, points) + step;
        for (let i = start; i < end; i += step) {
            const frequency = numbers_1.powAndFix(i, -points, points);
            const definition = { Frequency: frequency, Name: range.name };
            if (!existingFrequencies[frequency]) {
                frequencies.push(definition);
                existingFrequencies[frequency] = true;
                console.log('step', step, 'start', start, 'end', end, 'i', i, 'frequency', frequency);
            }
        }
    });
});
frequencies = frequencies.sort((a, b) => (a.Frequency || 0) - (b.Frequency || 0));
fs_helpers_1.writeFileAsync(`../data/frequencies.json`, JSON.stringify(frequencies, null, 2))
    // tslint:disable-next-line:no-empty
    .then((r) => { });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtZnJlcXVlbmNpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2VuZXJhdGUtZnJlcXVlbmNpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBK0I7QUFFL0Isb0RBQXFEO0FBQ3JELDhDQUE2QztBQUk3QyxNQUFNLE9BQU8sR0FBc0I7SUFDakMsV0FBVztJQUNYLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7SUFDaEUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtJQUVqRSxRQUFRO0lBQ1IsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLGlDQUFpQyxFQUFFO0lBQ3JGLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxzQ0FBc0MsRUFBRTtDQUMzRixDQUFDO0FBRUYsTUFBTSxTQUFTLEdBQXNCO0lBQ25DLFdBQVc7SUFDWCxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQy9ELEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7SUFDbEUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcs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RSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pGLDJCQUFjLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlFLG9DQUFvQztLQUNuQyxJQUFJLENBQUMsQ0FBQyxDQUFVLEVBQUUsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdtb2R1bGUtYWxpYXMvcmVnaXN0ZXInO1xyXG5cclxuaW1wb3J0IHsgd3JpdGVGaWxlQXN5bmMgfSBmcm9tICdAaGVscGVycy9mcy1oZWxwZXJzJztcclxuaW1wb3J0IHsgcG93QW5kRml4IH0gZnJvbSAnQGhlbHBlcnMvbnVtYmVycyc7XHJcbmltcG9ydCB7IElJbnB1dEZyZXF1ZW5jeSB9IGZyb20gJ0BpbnRlcmZhY2VzL2ktaW5wdXQtZnJlcXVlbmN5JztcclxuaW1wb3J0IHsgSVJlcGVhdGVyUmF3IH0gZnJvbSAnQGludGVyZmFjZXMvaS1yZXBlYXRlci1yYXcnO1xyXG5cclxuY29uc3QgcmFuZ2UybTogSUlucHV0RnJlcXVlbmN5W10gPSBbXHJcbiAgLy8gQ2hhbm5lbHNcclxuICB7IHN0YXJ0OiAxNDYuNCwgZW5kOiAxNDYuNTk1LCBzdGVwczogWzAuMDE1XSwgbmFtZTogYEZNIFZvaWNlYCB9LFxyXG4gIHsgc3RhcnQ6IDE0Ny40MiwgZW5kOiAxNDcuNTg1LCBzdGVwczogWzAuMDE1XSwgbmFtZTogYEZNIFZvaWNlYCB9LFxyXG5cclxuICAvLyBSYW5nZVxyXG4gIHsgc3RhcnQ6IDE0NC45LCBlbmQ6IDE0NS4xLCBzdGVwczogWzAuMDE1XSwgbmFtZTogYFdlYWsgU2lnbmFsLCBGTSwgRGlnaXRhbC9QYWNrZXRgIH0sXHJcbiAgeyBzdGFydDogMTQ1LjUsIGVuZDogMTQ1LjgsIHN0ZXBzOiBbMC4wMTVdLCBuYW1lOiBgTWlzY2VsbGFuZW91cyBhbmQgRXhwZXJpbWVudGFsIE1vZGVzYCB9LFxyXG5dO1xyXG5cclxuY29uc3QgcmFuZ2UxMjVtOiBJSW5wdXRGcmVxdWVuY3lbXSA9IFtcclxuICAvLyBDaGFubmVsc1xyXG4gIHsgc3RhcnQ6IDIyMy40LCBlbmQ6IDIyMy41Miwgc3RlcHM6IFswLjAyMF0sIG5hbWU6IGBGTSBWb2ljZWAgfSxcclxuICB7IHN0YXJ0OiAyMjIuMTYsIGVuZDogMjIyLjI0LCBzdGVwczogWzAuMDIwXSwgbmFtZTogYE1peGVkIE1vZGVgIH0sXHJcbiAgeyBzdGFydDogMjIzLjcyLCBlbmQ6IDIyMy44NCwgc3RlcHM6IFswLjAyMF0sIG5hbWU6IGBNaXhlZCBNb2RlYCB9LFxyXG5cclxuICAvLyBSYW5nZVxyXG4gIHsgc3RhcnQ6IDIyMy41MywgZW5kOiAyMjMuNjMsIHN0ZXBzOiBbMC4wMjBdLCBuYW1lOiBgRGlnaXRhbC9QYWNrZXRgIH0sXHJcbl07XHJcblxyXG5jb25zdCByYW5nZTcwY206IElJbnB1dEZyZXF1ZW5jeVtdID0gW1xyXG4gIC8vIENoYW5uZWxzXHJcbiAgeyBzdGFydDogNDQwLjcsIGVuZDogNDQxLjMsIHN0ZXBzOiBbMC4wMjVdLCBuYW1lOiBgTWl4ZWQgTW9kZWAgfSxcclxuICB7IHN0YXJ0OiA0NDUuNywgZW5kOiA0NDYuMjc1LCBzdGVwczogWzAuMDI1XSwgbmFtZTogYEZNIFZvaWNlYCB9LFxyXG4gIHsgc3RhcnQ6IDQ0Ni4yLCBlbmQ6IDQ0Ni4zLCBzdGVwczogWzAuMDEyNV0sIG5hbWU6IGBEaWdpdGFsIFZvaWNlIE5hcnJvd2JhbmRgIH0sXHJcblxyXG4gIC8vIFJhbmdlXHJcbiAgeyBzdGFydDogNDM0LjUsIGVuZDogNDM1LCBzdGVwczogWzAuMDI1XSwgbmFtZTogYE1peGVkIE1vZGUgRGlnaXRhbCBhbmQgVm9pY2VgIH0sXHJcbiAgeyBzdGFydDogNDM5LjUsIGVuZDogNDQwLCBzdGVwczogWzAuMDI1XSwgbmFtZTogYE1peGVkIE1vZGUgRGlnaXRhbCBhbmQgVm9pY2VgIH0sXHJcbl07XHJcblxyXG5pbnRlcmZhY2UgSU91dHB1dEZyZXF1ZW5jeSB7XHJcbiAgRnJlcXVlbmN5OiBudW1iZXI7XHJcbiAgTmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5sZXQgZnJlcXVlbmNpZXM6IElPdXRwdXRGcmVxdWVuY3lbXSA9IFtdO1xyXG5jb25zdCBleGlzdGluZ0ZyZXF1ZW5jaWVzOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSA9IHt9O1xyXG5cclxuY29uc3QgcG9pbnRzOiBudW1iZXIgPSA1O1xyXG5cclxuWy4uLnJhbmdlMm0sIC4uLnJhbmdlMTI1bSwgLi4ucmFuZ2U3MGNtXS5mb3JFYWNoKChyYW5nZTogSUlucHV0RnJlcXVlbmN5KSA9PiB7XHJcbiAgcmFuZ2Uuc3RlcHMuZm9yRWFjaCgoczogbnVtYmVyKSA9PiB7XHJcbiAgICBjb25zdCBzdGVwOiBudW1iZXIgPSBwb3dBbmRGaXgocywgcG9pbnRzKTtcclxuICAgIGNvbnN0IHN0YXJ0OiBudW1iZXIgPSBwb3dBbmRGaXgocmFuZ2Uuc3RhcnQsIHBvaW50cyk7XHJcbiAgICBjb25zdCBlbmQ6IG51bWJlciA9IHBvd0FuZEZpeChyYW5nZS5lbmQsIHBvaW50cykgKyBzdGVwO1xyXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gc3RlcCkge1xyXG4gICAgICBjb25zdCBmcmVxdWVuY3k6IG51bWJlciA9IHBvd0FuZEZpeChpLCAtcG9pbnRzLCBwb2ludHMpO1xyXG4gICAgICBjb25zdCBkZWZpbml0aW9uOiBJT3V0cHV0RnJlcXVlbmN5ID0geyBGcmVxdWVuY3k6IGZyZXF1ZW5jeSwgTmFtZTogcmFuZ2UubmFtZSB9O1xyXG4gICAgICBpZiAoIWV4aXN0aW5nRnJlcXVlbmNpZXNbZnJlcXVlbmN5XSkge1xyXG4gICAgICAgIGZyZXF1ZW5jaWVzLnB1c2goZGVmaW5pdGlvbik7XHJcbiAgICAgICAgZXhpc3RpbmdGcmVxdWVuY2llc1tmcmVxdWVuY3ldID0gdHJ1ZTtcclxuICAgICAgICBjb25zb2xlLmxvZygnc3RlcCcsIHN0ZXAsICdzdGFydCcsIHN0YXJ0LCAnZW5kJywgZW5kLCAnaScsIGksICdmcmVxdWVuY3knLCBmcmVxdWVuY3kpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pO1xyXG5mcmVxdWVuY2llcyA9IGZyZXF1ZW5jaWVzLnNvcnQoXHJcbiAgKGE6IElPdXRwdXRGcmVxdWVuY3ksIGI6IElPdXRwdXRGcmVxdWVuY3kpID0+IChhLkZyZXF1ZW5jeSB8fCAwKSAtIChiLkZyZXF1ZW5jeSB8fCAwKSk7XHJcbndyaXRlRmlsZUFzeW5jKGAuLi9kYXRhL2ZyZXF1ZW5jaWVzLmpzb25gLCBKU09OLnN0cmluZ2lmeShmcmVxdWVuY2llcywgbnVsbCwgMikpXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWVtcHR5XHJcbiAgLnRoZW4oKHI6IHVua25vd24pID0+IHt9KTtcclxuIl19