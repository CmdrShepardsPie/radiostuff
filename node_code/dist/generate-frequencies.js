"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("module-alias/register");
const fs_helpers_1 = require("@helpers/fs-helpers");
const numbers_1 = require("@helpers/numbers");
const range2m = [
    // Channels
    { start: 146.4, end: 146.595, steps: [0.015], name: `FM Voice` },
    { start: 147.42, end: 147.585, steps: [0.015], name: `FM Voice` },
    // Range
    { start: 144.9, end: 145.1, steps: [0.015], name: `Weak Signal, FM, Digital/Packet` },
    { start: 145.5, end: 145.8, steps: [0.015], name: `Miscellaneous and Experimental Modes` },
];
const range125m = [
    // Channels
    { start: 223.4, end: 223.52, steps: [0.020], name: `FM Voice` },
    { start: 222.16, end: 222.24, steps: [0.020], name: `Mixed Mode` },
    { start: 223.72, end: 223.84, steps: [0.020], name: `Mixed Mode` },
    // Range
    { start: 223.53, end: 223.63, steps: [0.020], name: `Digital/Packet` },
];
const range70cm = [
    // Channels
    { start: 440.7, end: 441.3, steps: [0.025], name: `Mixed Mode` },
    { start: 445.7, end: 446.275, steps: [0.025], name: `FM Voice` },
    { start: 446.2, end: 446.3, steps: [0.0125], name: `Digital Voice Narrowband` },
    // Range
    { start: 434.5, end: 435, steps: [0.025], name: `Mixed Mode Digital and Voice` },
    { start: 439.5, end: 440, steps: [0.025], name: `Mixed Mode Digital and Voice` },
];
let frequencies = [];
const existingFrequencies = {};
const points = 5;
[...range2m, ...range125m, ...range70cm].forEach((range) => {
    range.steps.forEach((s) => {
        const step = numbers_1.powAndFix(s, points);
        const start = numbers_1.powAndFix(range.start, points);
        const end = numbers_1.powAndFix(range.end, points) + step;
        for (let i = start; i < end; i += step) {
            const frequency = numbers_1.powAndFix(i, -points, points);
            const definition = { Frequency: frequency, Name: range.name };
            if (!existingFrequencies[frequency]) {
                frequencies.push(definition);
                existingFrequencies[frequency] = true;
                console.log("step", step, "start", start, "end", end, "i", i, "frequency", frequency);
            }
        }
    });
});
frequencies = frequencies.sort((a, b) => (a.Frequency || 0) - (b.Frequency || 0));
fs_helpers_1.writeFileAsync(`../data/frequencies.json`, JSON.stringify(frequencies, null, 2))
    // tslint:disable-next-line:no-empty
    .then((r) => {
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtZnJlcXVlbmNpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2VuZXJhdGUtZnJlcXVlbmNpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBK0I7QUFFL0Isb0RBQXFEO0FBQ3JELDhDQUE2QztBQUc3QyxNQUFNLE9BQU8sR0FBc0I7SUFDakMsV0FBVztJQUNYLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7SUFDaEUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtJQUVqRSxRQUFRO0lBQ1IsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLGlDQUFpQyxFQUFFO0lBQ3JGLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxzQ0FBc0MsRUFBRTtDQUMzRixDQUFDO0FBRUYsTUFBTSxTQUFTLEdBQXNCO0lBQ25DLFdBQVc7SUFDWCxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQy9ELEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7SUFDbEUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtJQUVsRSxRQUFRO0lBQ1IsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFO0NBQ3ZFLENBQUM7QUFFRixNQUFNLFNBQVMsR0FBc0I7SUFDbkMsV0FBVztJQUNYLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7SUFDaEUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtJQUNoRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsMEJBQTBCLEVBQUU7SUFFL0UsUUFBUTtJQUNSLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSw4QkFBOEIsRUFBRTtJQUNoRixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsOEJBQThCLEVBQUU7Q0FDakYsQ0FBQztBQU9GLElBQUksV0FBVyxHQUF1QixFQUFFLENBQUM7QUFDekMsTUFBTSxtQkFBbUIsR0FBK0IsRUFBRSxDQUFDO0FBRTNELE1BQU0sTUFBTSxHQUFXLENBQUMsQ0FBQztBQUV6QixDQUFDLEdBQUcsT0FBTyxFQUFFLEdBQUcsU0FBUyxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBc0IsRUFBRSxFQUFFO0lBQzFFLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBUyxFQUFFLEVBQUU7UUFDaEMsTUFBTSxJQUFJLEdBQVcsbUJBQVMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUMsTUFBTSxLQUFLLEdBQVcsbUJBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3JELE1BQU0sR0FBRyxHQUFXLG1CQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDeEQsS0FBSyxJQUFJLENBQUMsR0FBVyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQzlDLE1BQU0sU0FBUyxHQUFXLG1CQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELE1BQU0sVUFBVSxHQUFxQixFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNoRixJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ25DLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzdCLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQztnQkFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQzthQUN2RjtTQUNGO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUNILFdBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUM1QixDQUFDLENBQW1CLEVBQUUsQ0FBbUIsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pGLDJCQUFjLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlFLG9DQUFvQztLQUNuQyxJQUFJLENBQUMsQ0FBQyxDQUFVLEVBQUUsRUFBRTtBQUNyQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIm1vZHVsZS1hbGlhcy9yZWdpc3RlclwiO1xyXG5cclxuaW1wb3J0IHsgd3JpdGVGaWxlQXN5bmMgfSBmcm9tIFwiQGhlbHBlcnMvZnMtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyBwb3dBbmRGaXggfSBmcm9tIFwiQGhlbHBlcnMvbnVtYmVyc1wiO1xyXG5pbXBvcnQgeyBJSW5wdXRGcmVxdWVuY3kgfSBmcm9tIFwiQGludGVyZmFjZXMvaS1pbnB1dC1mcmVxdWVuY3lcIjtcclxuXHJcbmNvbnN0IHJhbmdlMm06IElJbnB1dEZyZXF1ZW5jeVtdID0gW1xyXG4gIC8vIENoYW5uZWxzXHJcbiAgeyBzdGFydDogMTQ2LjQsIGVuZDogMTQ2LjU5NSwgc3RlcHM6IFswLjAxNV0sIG5hbWU6IGBGTSBWb2ljZWAgfSxcclxuICB7IHN0YXJ0OiAxNDcuNDIsIGVuZDogMTQ3LjU4NSwgc3RlcHM6IFswLjAxNV0sIG5hbWU6IGBGTSBWb2ljZWAgfSxcclxuXHJcbiAgLy8gUmFuZ2VcclxuICB7IHN0YXJ0OiAxNDQuOSwgZW5kOiAxNDUuMSwgc3RlcHM6IFswLjAxNV0sIG5hbWU6IGBXZWFrIFNpZ25hbCwgRk0sIERpZ2l0YWwvUGFja2V0YCB9LFxyXG4gIHsgc3RhcnQ6IDE0NS41LCBlbmQ6IDE0NS44LCBzdGVwczogWzAuMDE1XSwgbmFtZTogYE1pc2NlbGxhbmVvdXMgYW5kIEV4cGVyaW1lbnRhbCBNb2Rlc2AgfSxcclxuXTtcclxuXHJcbmNvbnN0IHJhbmdlMTI1bTogSUlucHV0RnJlcXVlbmN5W10gPSBbXHJcbiAgLy8gQ2hhbm5lbHNcclxuICB7IHN0YXJ0OiAyMjMuNCwgZW5kOiAyMjMuNTIsIHN0ZXBzOiBbMC4wMjBdLCBuYW1lOiBgRk0gVm9pY2VgIH0sXHJcbiAgeyBzdGFydDogMjIyLjE2LCBlbmQ6IDIyMi4yNCwgc3RlcHM6IFswLjAyMF0sIG5hbWU6IGBNaXhlZCBNb2RlYCB9LFxyXG4gIHsgc3RhcnQ6IDIyMy43MiwgZW5kOiAyMjMuODQsIHN0ZXBzOiBbMC4wMjBdLCBuYW1lOiBgTWl4ZWQgTW9kZWAgfSxcclxuXHJcbiAgLy8gUmFuZ2VcclxuICB7IHN0YXJ0OiAyMjMuNTMsIGVuZDogMjIzLjYzLCBzdGVwczogWzAuMDIwXSwgbmFtZTogYERpZ2l0YWwvUGFja2V0YCB9LFxyXG5dO1xyXG5cclxuY29uc3QgcmFuZ2U3MGNtOiBJSW5wdXRGcmVxdWVuY3lbXSA9IFtcclxuICAvLyBDaGFubmVsc1xyXG4gIHsgc3RhcnQ6IDQ0MC43LCBlbmQ6IDQ0MS4zLCBzdGVwczogWzAuMDI1XSwgbmFtZTogYE1peGVkIE1vZGVgIH0sXHJcbiAgeyBzdGFydDogNDQ1LjcsIGVuZDogNDQ2LjI3NSwgc3RlcHM6IFswLjAyNV0sIG5hbWU6IGBGTSBWb2ljZWAgfSxcclxuICB7IHN0YXJ0OiA0NDYuMiwgZW5kOiA0NDYuMywgc3RlcHM6IFswLjAxMjVdLCBuYW1lOiBgRGlnaXRhbCBWb2ljZSBOYXJyb3diYW5kYCB9LFxyXG5cclxuICAvLyBSYW5nZVxyXG4gIHsgc3RhcnQ6IDQzNC41LCBlbmQ6IDQzNSwgc3RlcHM6IFswLjAyNV0sIG5hbWU6IGBNaXhlZCBNb2RlIERpZ2l0YWwgYW5kIFZvaWNlYCB9LFxyXG4gIHsgc3RhcnQ6IDQzOS41LCBlbmQ6IDQ0MCwgc3RlcHM6IFswLjAyNV0sIG5hbWU6IGBNaXhlZCBNb2RlIERpZ2l0YWwgYW5kIFZvaWNlYCB9LFxyXG5dO1xyXG5cclxuaW50ZXJmYWNlIElPdXRwdXRGcmVxdWVuY3kge1xyXG4gIEZyZXF1ZW5jeTogbnVtYmVyO1xyXG4gIE5hbWU6IHN0cmluZztcclxufVxyXG5cclxubGV0IGZyZXF1ZW5jaWVzOiBJT3V0cHV0RnJlcXVlbmN5W10gPSBbXTtcclxuY29uc3QgZXhpc3RpbmdGcmVxdWVuY2llczogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcclxuXHJcbmNvbnN0IHBvaW50czogbnVtYmVyID0gNTtcclxuXHJcblsuLi5yYW5nZTJtLCAuLi5yYW5nZTEyNW0sIC4uLnJhbmdlNzBjbV0uZm9yRWFjaCgocmFuZ2U6IElJbnB1dEZyZXF1ZW5jeSkgPT4ge1xyXG4gIHJhbmdlLnN0ZXBzLmZvckVhY2goKHM6IG51bWJlcikgPT4ge1xyXG4gICAgY29uc3Qgc3RlcDogbnVtYmVyID0gcG93QW5kRml4KHMsIHBvaW50cyk7XHJcbiAgICBjb25zdCBzdGFydDogbnVtYmVyID0gcG93QW5kRml4KHJhbmdlLnN0YXJ0LCBwb2ludHMpO1xyXG4gICAgY29uc3QgZW5kOiBudW1iZXIgPSBwb3dBbmRGaXgocmFuZ2UuZW5kLCBwb2ludHMpICsgc3RlcDtcclxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IHN0ZXApIHtcclxuICAgICAgY29uc3QgZnJlcXVlbmN5OiBudW1iZXIgPSBwb3dBbmRGaXgoaSwgLXBvaW50cywgcG9pbnRzKTtcclxuICAgICAgY29uc3QgZGVmaW5pdGlvbjogSU91dHB1dEZyZXF1ZW5jeSA9IHsgRnJlcXVlbmN5OiBmcmVxdWVuY3ksIE5hbWU6IHJhbmdlLm5hbWUgfTtcclxuICAgICAgaWYgKCFleGlzdGluZ0ZyZXF1ZW5jaWVzW2ZyZXF1ZW5jeV0pIHtcclxuICAgICAgICBmcmVxdWVuY2llcy5wdXNoKGRlZmluaXRpb24pO1xyXG4gICAgICAgIGV4aXN0aW5nRnJlcXVlbmNpZXNbZnJlcXVlbmN5XSA9IHRydWU7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJzdGVwXCIsIHN0ZXAsIFwic3RhcnRcIiwgc3RhcnQsIFwiZW5kXCIsIGVuZCwgXCJpXCIsIGksIFwiZnJlcXVlbmN5XCIsIGZyZXF1ZW5jeSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcbmZyZXF1ZW5jaWVzID0gZnJlcXVlbmNpZXMuc29ydChcclxuICAoYTogSU91dHB1dEZyZXF1ZW5jeSwgYjogSU91dHB1dEZyZXF1ZW5jeSkgPT4gKGEuRnJlcXVlbmN5IHx8IDApIC0gKGIuRnJlcXVlbmN5IHx8IDApKTtcclxud3JpdGVGaWxlQXN5bmMoYC4uL2RhdGEvZnJlcXVlbmNpZXMuanNvbmAsIEpTT04uc3RyaW5naWZ5KGZyZXF1ZW5jaWVzLCBudWxsLCAyKSlcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHlcclxuICAudGhlbigocjogdW5rbm93bikgPT4ge1xyXG4gIH0pO1xyXG4iXX0=