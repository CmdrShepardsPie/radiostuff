"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("module-alias/register");
const fs_helpers_1 = require("@helpers/fs-helpers");
const log_helpers_1 = require("@helpers/log-helpers");
const log = log_helpers_1.createLog('Generate Frequencies');
let frequencies = [];
const range2m = [
    // Channels
    { start: 146.4, end: 146.595, steps: [0.015], name: `FM Voice` },
    { start: 147.42, end: 147.585, steps: [0.015], name: `FM Voice` },
    // Range
    { start: 144.9, end: 145.1, steps: [0.015], name: `Weak Signal, FM, Digital/Packet` },
    { start: 145.5, end: 145.8, steps: [0.015], name: `Miscellaneous and Experimental Modes` },
];
const range125m = [
    // Channels
    { start: 223.4, end: 223.52, steps: [0.020], name: `FM Voice` },
    { start: 222.16, end: 222.24, steps: [0.020], name: `Mixed Mode` },
    { start: 223.72, end: 223.84, steps: [0.020], name: `Mixed Mode` },
    // Range
    { start: 223.53, end: 223.63, steps: [0.020], name: `Digital/Packet` },
];
const range70cm = [
    // Channels
    { start: 440.7, end: 441.3, steps: [0.025], name: `Mixed Mode` },
    { start: 445.7, end: 446.275, steps: [0.025], name: `FM Voice` },
    { start: 446.2, end: 446.3, steps: [0.0125], name: `Digital Voice Narrowband` },
    // Range
    { start: 434.5, end: 435, steps: [0.025], name: `Mixed Mode Digital and Voice` },
    { start: 439.5, end: 440, steps: [0.025], name: `Mixed Mode Digital and Voice` },
];
[...range2m, ...range125m, ...range70cm].forEach((range) => {
    range.steps.forEach((step) => {
        for (let i = range.start; i <= range.end; i += step) {
            i = Math.round(i * 100000) / 100000;
            if (!frequencies.find((f) => f.Frequency === i)) {
                frequencies.push({ Frequency: i, Name: range.name });
            }
        }
    });
});
frequencies = frequencies.sort((a, b) => (a.Frequency || 0) - (b.Frequency || 0));
log(frequencies, frequencies.length);
fs_helpers_1.writeFileAsync(`./data/frequencies.json`, JSON.stringify(frequencies, null, 2))
    .then((r) => log(`Done`, r));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtZnJlcXVlbmNpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9nZW5lcmF0ZS1mcmVxdWVuY2llcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUErQjtBQUUvQixvREFBcUQ7QUFDckQsc0RBQWlEO0FBSWpELE1BQU0sR0FBRyxHQUE0Qix1QkFBUyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDdkUsSUFBSSxXQUFXLEdBQW1CLEVBQUUsQ0FBQztBQUNyQyxNQUFNLE9BQU8sR0FBMkI7SUFDdEMsV0FBVztJQUNYLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7SUFDaEUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtJQUVqRSxRQUFRO0lBQ1IsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLGlDQUFpQyxFQUFFO0lBQ3JGLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxzQ0FBc0MsRUFBRTtDQUMzRixDQUFDO0FBRUYsTUFBTSxTQUFTLEdBQTJCO0lBQ3hDLFdBQVc7SUFDWCxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0lBQy9ELEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFB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dWxlLWFsaWFzL3JlZ2lzdGVyJztcclxuXHJcbmltcG9ydCB7IHdyaXRlRmlsZUFzeW5jIH0gZnJvbSAnQGhlbHBlcnMvZnMtaGVscGVycyc7XHJcbmltcG9ydCB7IGNyZWF0ZUxvZyB9IGZyb20gJ0BoZWxwZXJzL2xvZy1oZWxwZXJzJztcclxuaW1wb3J0IHsgSUZyZXF1ZW5jeURlZmluaXRpb24gfSBmcm9tICdAaW50ZXJmYWNlcy9pLWZyZXF1ZW5jeS1kZWZpbml0aW9uJztcclxuaW1wb3J0IHsgSVJlcGVhdGVyUmF3IH0gZnJvbSAnQGludGVyZmFjZXMvaS1yZXBlYXRlci1yYXcnO1xyXG5cclxuY29uc3QgbG9nOiAoLi4ubXNnOiBhbnlbXSkgPT4gdm9pZCA9IGNyZWF0ZUxvZygnR2VuZXJhdGUgRnJlcXVlbmNpZXMnKTtcclxubGV0IGZyZXF1ZW5jaWVzOiBJUmVwZWF0ZXJSYXdbXSA9IFtdO1xyXG5jb25zdCByYW5nZTJtOiBJRnJlcXVlbmN5RGVmaW5pdGlvbltdID0gW1xyXG4gIC8vIENoYW5uZWxzXHJcbiAgeyBzdGFydDogMTQ2LjQsIGVuZDogMTQ2LjU5NSwgc3RlcHM6IFswLjAxNV0sIG5hbWU6IGBGTSBWb2ljZWAgfSxcclxuICB7IHN0YXJ0OiAxNDcuNDIsIGVuZDogMTQ3LjU4NSwgc3RlcHM6IFswLjAxNV0sIG5hbWU6IGBGTSBWb2ljZWAgfSxcclxuXHJcbiAgLy8gUmFuZ2VcclxuICB7IHN0YXJ0OiAxNDQuOSwgZW5kOiAxNDUuMSwgc3RlcHM6IFswLjAxNV0sIG5hbWU6IGBXZWFrIFNpZ25hbCwgRk0sIERpZ2l0YWwvUGFja2V0YCB9LFxyXG4gIHsgc3RhcnQ6IDE0NS41LCBlbmQ6IDE0NS44LCBzdGVwczogWzAuMDE1XSwgbmFtZTogYE1pc2NlbGxhbmVvdXMgYW5kIEV4cGVyaW1lbnRhbCBNb2Rlc2AgfSxcclxuXTtcclxuXHJcbmNvbnN0IHJhbmdlMTI1bTogSUZyZXF1ZW5jeURlZmluaXRpb25bXSA9IFtcclxuICAvLyBDaGFubmVsc1xyXG4gIHsgc3RhcnQ6IDIyMy40LCBlbmQ6IDIyMy41Miwgc3RlcHM6IFswLjAyMF0sIG5hbWU6IGBGTSBWb2ljZWAgfSxcclxuICB7IHN0YXJ0OiAyMjIuMTYsIGVuZDogMjIyLjI0LCBzdGVwczogWzAuMDIwXSwgbmFtZTogYE1peGVkIE1vZGVgIH0sXHJcbiAgeyBzdGFydDogMjIzLjcyLCBlbmQ6IDIyMy44NCwgc3RlcHM6IFswLjAyMF0sIG5hbWU6IGBNaXhlZCBNb2RlYCB9LFxyXG5cclxuICAvLyBSYW5nZVxyXG4gIHsgc3RhcnQ6IDIyMy41MywgZW5kOiAyMjMuNjMsIHN0ZXBzOiBbMC4wMjBdLCBuYW1lOiBgRGlnaXRhbC9QYWNrZXRgIH0sXHJcbl07XHJcblxyXG5jb25zdCByYW5nZTcwY206IElGcmVxdWVuY3lEZWZpbml0aW9uW10gPSBbXHJcbiAgLy8gQ2hhbm5lbHNcclxuICB7IHN0YXJ0OiA0NDAuNywgZW5kOiA0NDEuMywgc3RlcHM6IFswLjAyNV0sIG5hbWU6IGBNaXhlZCBNb2RlYCB9LFxyXG4gIHsgc3RhcnQ6IDQ0NS43LCBlbmQ6IDQ0Ni4yNzUsIHN0ZXBzOiBbMC4wMjVdLCBuYW1lOiBgRk0gVm9pY2VgIH0sXHJcbiAgeyBzdGFydDogNDQ2LjIsIGVuZDogNDQ2LjMsIHN0ZXBzOiBbMC4wMTI1XSwgbmFtZTogYERpZ2l0YWwgVm9pY2UgTmFycm93YmFuZGAgfSxcclxuXHJcbiAgLy8gUmFuZ2VcclxuICB7IHN0YXJ0OiA0MzQuNSwgZW5kOiA0MzUsIHN0ZXBzOiBbMC4wMjVdLCBuYW1lOiBgTWl4ZWQgTW9kZSBEaWdpdGFsIGFuZCBWb2ljZWAgfSxcclxuICB7IHN0YXJ0OiA0MzkuNSwgZW5kOiA0NDAsIHN0ZXBzOiBbMC4wMjVdLCBuYW1lOiBgTWl4ZWQgTW9kZSBEaWdpdGFsIGFuZCBWb2ljZWAgfSxcclxuXTtcclxuXHJcblsuLi5yYW5nZTJtLCAuLi5yYW5nZTEyNW0sIC4uLnJhbmdlNzBjbV0uZm9yRWFjaCgocmFuZ2U6IElGcmVxdWVuY3lEZWZpbml0aW9uKSA9PiB7XHJcbiAgcmFuZ2Uuc3RlcHMuZm9yRWFjaCgoc3RlcDogbnVtYmVyKSA9PiB7XHJcbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSByYW5nZS5zdGFydDsgaSA8PSByYW5nZS5lbmQ7IGkgKz0gc3RlcCkge1xyXG4gICAgICBpID0gTWF0aC5yb3VuZChpICogMTAwMDAwKSAvIDEwMDAwMDtcclxuICAgICAgaWYgKCFmcmVxdWVuY2llcy5maW5kKChmOiBJUmVwZWF0ZXJSYXcpID0+IGYuRnJlcXVlbmN5ID09PSBpKSkge1xyXG4gICAgICAgIGZyZXF1ZW5jaWVzLnB1c2goeyBGcmVxdWVuY3k6IGksIE5hbWU6IHJhbmdlLm5hbWUgfSBhcyBhbnkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pO1xyXG5mcmVxdWVuY2llcyA9IGZyZXF1ZW5jaWVzLnNvcnQoKGE6IElSZXBlYXRlclJhdywgYjogSVJlcGVhdGVyUmF3KSA9PiAoYS5GcmVxdWVuY3kgfHwgMCkgLSAoYi5GcmVxdWVuY3kgfHwgMCkpO1xyXG5sb2coZnJlcXVlbmNpZXMsIGZyZXF1ZW5jaWVzLmxlbmd0aCk7XHJcbndyaXRlRmlsZUFzeW5jKGAuL2RhdGEvZnJlcXVlbmNpZXMuanNvbmAsIEpTT04uc3RyaW5naWZ5KGZyZXF1ZW5jaWVzLCBudWxsLCAyKSlcclxuICAudGhlbigocjogdW5rbm93bikgPT4gbG9nKGBEb25lYCwgcikpO1xyXG4iXX0=