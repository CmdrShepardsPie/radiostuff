"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_helpers_1 = require("@helpers/fs-helpers");
const helpers_1 = require("@helpers/helpers");
const log_helpers_1 = require("@helpers/log-helpers");
const gps_distance_1 = __importDefault(require("gps-distance"));
const log = log_helpers_1.createLog('Combine');
exports.default = (async () => {
    const myPoint = [39.627071500, -104.893322500]; // 4982 S Ulster St
    const combined = [];
    const files = await fs_helpers_1.getAllFilesFromDirectory('data/repeaters/results/CO');
    log('Got', files.length, 'files');
    const found = {};
    files.forEach((file) => {
        log('Got', file.length, 'repeaters');
        file.forEach((item) => {
            if (!found[`${item.state_id}-${item.ID}`]) {
                found[`${item.state_id}-${item.ID}`] = true;
                combined.push(item);
                const distance = gps_distance_1.default([myPoint, [item.Latitude, item.Longitude]]);
                item.Mi = distance * 0.62137119;
            }
        });
    });
    log('Got', combined.length, 'unique repeaters');
    combined.sort((a, b) => {
        const aMi = helpers_1.numberToString(a.Mi || 0, 4, 24);
        const bMi = helpers_1.numberToString(b.Mi || 0, 4, 24);
        const aRepeaterName = a.Call;
        const bRepeaterName = b.Call;
        const aFrequency = helpers_1.numberToString(a.Frequency || 0, 4, 5);
        const bFrequency = helpers_1.numberToString(b.Frequency || 0, 4, 5);
        const aStr = `${aMi} ${aRepeaterName} ${aFrequency}`;
        const bStr = `${bMi} ${bRepeaterName} ${bFrequency}`;
        return aStr > bStr ? 1 : aStr < bStr ? -1 : 0;
    });
    const stats = combined.reduce((result, data) => {
        const freq = Math.round(data.Frequency || 0).toString();
        const pow = Math.pow(10, Math.max(freq.length - 2, 0)) * 2;
        const group = Math.round((data.Frequency || 0) / pow) * pow;
        // console.log(freq, pow, group);
        const count = result[group] || 0;
        return { ...result, [group]: count + 1 };
    }, {});
    // tslint:disable-next-line:no-console
    console.log('STATS', stats);
    // combined.slice(0, 100).forEach((c) => log(c.Call, "\t", c.Latitude, "\t", c.Longitude, "\t", c.Mi));
    await fs_helpers_1.writeToJsonAndCsv('data/repeaters/combined/CO', combined);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYmluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2NvbWJpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxvREFBa0Y7QUFDbEYsOENBQWtEO0FBQ2xELHNEQUFpRDtBQUVqRCxnRUFBa0Q7QUFFbEQsTUFBTSxHQUFHLEdBQTRCLHVCQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFMUQsa0JBQWUsQ0FBQyxLQUFLLElBQW1CLEVBQUU7SUFDeEMsTUFBTSxPQUFPLEdBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtJQUMxRSxNQUFNLFFBQVEsR0FBbUIsRUFBRSxDQUFDO0lBQ3BDLE1BQU0sS0FBSyxHQUFxQixNQUFNLHFDQUF3QixDQUFpQiwyQkFBMkIsQ0FBQyxDQUFDO0lBQzVHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNsQyxNQUFNLEtBQUssR0FBMkMsRUFBRSxDQUFDO0lBQ3pELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFvQixFQUFFLEVBQUU7UUFDckMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFrQixFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3pDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO2dCQUM1QyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwQixNQUFNLFFBQVEsR0FBVyxzQkFBVyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqRixJQUFJLENBQUMsRUFBRSxHQUFHLFFBQVEsR0FBRyxVQUFVLENBQUM7YUFDakM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDaEQsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQWUsRUFBRSxDQUFlLEVBQUUsRUFBRTtRQUNqRCxNQUFNLEdBQUcsR0FBVyx3QkFBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLEdBQUcsR0FBVyx3QkFBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyRCxNQUFNLGFBQWEsR0FBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNqRCxNQUFNLGFBQWEsR0FBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNqRCxNQUFNLFVBQVUsR0FBVyx3QkFBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRSxNQUFNLFVBQVUsR0FBVyx3QkFBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRSxNQUFNLElBQUksR0FBVyxHQUFHLEdBQUcsSUFBSSxhQUFhLElBQUksVUFBVSxFQUFFLENBQUM7UUFDN0QsTUFBTSxJQUFJLEdBQVcsR0FBRyxHQUFHLElBQUksYUFBYSxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBRTdELE9BQU8sSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxLQUFLLEdBQStCLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFtQyxFQUFFLElBQWtCLEVBQUUsRUFBRTtRQUNwSCxNQUFNLElBQUksR0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEUsTUFBTSxHQUFHLEdBQVcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuRSxNQUFNLEtBQUssR0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDcEUsaUNBQWlDO1FBQ2pDLE1BQU0sS0FBSyxHQUFXLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsT0FBTyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBQzNDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNQLHNDQUFzQztJQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1Qix1R0FBdUc7SUFDdkcsTUFBTSw4QkFBaUIsQ0FBQyw0QkFBNEIsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNsRSxDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QWxsRmlsZXNGcm9tRGlyZWN0b3J5LCB3cml0ZVRvSnNvbkFuZENzdiB9IGZyb20gJ0BoZWxwZXJzL2ZzLWhlbHBlcnMnO1xyXG5pbXBvcnQgeyBudW1iZXJUb1N0cmluZyB9IGZyb20gJ0BoZWxwZXJzL2hlbHBlcnMnO1xyXG5pbXBvcnQgeyBjcmVhdGVMb2cgfSBmcm9tICdAaGVscGVycy9sb2ctaGVscGVycyc7XHJcbmltcG9ydCB7IElSZXBlYXRlclJhdyB9IGZyb20gJ0BpbnRlcmZhY2VzL2ktcmVwZWF0ZXItcmF3JztcclxuaW1wb3J0IGdwc0Rpc3RhbmNlLCB7IFBvaW50IH0gZnJvbSAnZ3BzLWRpc3RhbmNlJztcclxuXHJcbmNvbnN0IGxvZzogKC4uLm1zZzogYW55W10pID0+IHZvaWQgPSBjcmVhdGVMb2coJ0NvbWJpbmUnKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XHJcbiAgY29uc3QgbXlQb2ludDogUG9pbnQgPSBbMzkuNjI3MDcxNTAwLCAtMTA0Ljg5MzMyMjUwMF07IC8vIDQ5ODIgUyBVbHN0ZXIgU3RcclxuICBjb25zdCBjb21iaW5lZDogSVJlcGVhdGVyUmF3W10gPSBbXTtcclxuICBjb25zdCBmaWxlczogSVJlcGVhdGVyUmF3W11bXSA9IGF3YWl0IGdldEFsbEZpbGVzRnJvbURpcmVjdG9yeTxJUmVwZWF0ZXJSYXdbXT4oJ2RhdGEvcmVwZWF0ZXJzL3Jlc3VsdHMvQ08nKTtcclxuICBsb2coJ0dvdCcsIGZpbGVzLmxlbmd0aCwgJ2ZpbGVzJyk7XHJcbiAgY29uc3QgZm91bmQ6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB8IHVuZGVmaW5lZCB9ID0ge307XHJcbiAgZmlsZXMuZm9yRWFjaCgoZmlsZTogSVJlcGVhdGVyUmF3W10pID0+IHtcclxuICAgIGxvZygnR290JywgZmlsZS5sZW5ndGgsICdyZXBlYXRlcnMnKTtcclxuICAgIGZpbGUuZm9yRWFjaCgoaXRlbTogSVJlcGVhdGVyUmF3KSA9PiB7XHJcbiAgICAgIGlmICghZm91bmRbYCR7aXRlbS5zdGF0ZV9pZH0tJHtpdGVtLklEfWBdKSB7XHJcbiAgICAgICAgZm91bmRbYCR7aXRlbS5zdGF0ZV9pZH0tJHtpdGVtLklEfWBdID0gdHJ1ZTtcclxuICAgICAgICBjb21iaW5lZC5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlOiBudW1iZXIgPSBncHNEaXN0YW5jZShbbXlQb2ludCwgW2l0ZW0uTGF0aXR1ZGUsIGl0ZW0uTG9uZ2l0dWRlXV0pO1xyXG4gICAgICAgIGl0ZW0uTWkgPSBkaXN0YW5jZSAqIDAuNjIxMzcxMTk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIGxvZygnR290JywgY29tYmluZWQubGVuZ3RoLCAndW5pcXVlIHJlcGVhdGVycycpO1xyXG4gIGNvbWJpbmVkLnNvcnQoKGE6IElSZXBlYXRlclJhdywgYjogSVJlcGVhdGVyUmF3KSA9PiB7XHJcbiAgICBjb25zdCBhTWk6IHN0cmluZyA9IG51bWJlclRvU3RyaW5nKGEuTWkgfHwgMCwgNCwgMjQpO1xyXG4gICAgY29uc3QgYk1pOiBzdHJpbmcgPSBudW1iZXJUb1N0cmluZyhiLk1pIHx8IDAsIDQsIDI0KTtcclxuICAgIGNvbnN0IGFSZXBlYXRlck5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGEuQ2FsbDtcclxuICAgIGNvbnN0IGJSZXBlYXRlck5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGIuQ2FsbDtcclxuICAgIGNvbnN0IGFGcmVxdWVuY3k6IHN0cmluZyA9IG51bWJlclRvU3RyaW5nKGEuRnJlcXVlbmN5IHx8IDAsIDQsIDUpO1xyXG4gICAgY29uc3QgYkZyZXF1ZW5jeTogc3RyaW5nID0gbnVtYmVyVG9TdHJpbmcoYi5GcmVxdWVuY3kgfHwgMCwgNCwgNSk7XHJcbiAgICBjb25zdCBhU3RyOiBzdHJpbmcgPSBgJHthTWl9ICR7YVJlcGVhdGVyTmFtZX0gJHthRnJlcXVlbmN5fWA7XHJcbiAgICBjb25zdCBiU3RyOiBzdHJpbmcgPSBgJHtiTWl9ICR7YlJlcGVhdGVyTmFtZX0gJHtiRnJlcXVlbmN5fWA7XHJcblxyXG4gICAgcmV0dXJuIGFTdHIgPiBiU3RyID8gMSA6IGFTdHIgPCBiU3RyID8gLTEgOiAwO1xyXG4gIH0pO1xyXG4gIGNvbnN0IHN0YXRzOiB7IFsga2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IGNvbWJpbmVkLnJlZHVjZSgocmVzdWx0OiB7IFsga2V5OiBzdHJpbmcgXTogbnVtYmVyIH0sIGRhdGE6IElSZXBlYXRlclJhdykgPT4ge1xyXG4gICAgY29uc3QgZnJlcTogc3RyaW5nID0gTWF0aC5yb3VuZChkYXRhLkZyZXF1ZW5jeSB8fCAwKS50b1N0cmluZygpO1xyXG4gICAgY29uc3QgcG93OiBudW1iZXIgPSBNYXRoLnBvdygxMCwgTWF0aC5tYXgoZnJlcS5sZW5ndGggLSAyLCAwKSkgKiAyO1xyXG4gICAgY29uc3QgZ3JvdXA6IG51bWJlciA9IE1hdGgucm91bmQoKGRhdGEuRnJlcXVlbmN5IHx8IDApIC8gcG93KSAqIHBvdztcclxuICAgIC8vIGNvbnNvbGUubG9nKGZyZXEsIHBvdywgZ3JvdXApO1xyXG4gICAgY29uc3QgY291bnQ6IG51bWJlciA9IHJlc3VsdFtncm91cF0gfHwgMDtcclxuICAgIHJldHVybiB7IC4uLnJlc3VsdCwgW2dyb3VwXTogY291bnQgKyAxIH07XHJcbiAgfSwge30pO1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXHJcbiAgY29uc29sZS5sb2coJ1NUQVRTJywgc3RhdHMpO1xyXG4gIC8vIGNvbWJpbmVkLnNsaWNlKDAsIDEwMCkuZm9yRWFjaCgoYykgPT4gbG9nKGMuQ2FsbCwgXCJcXHRcIiwgYy5MYXRpdHVkZSwgXCJcXHRcIiwgYy5Mb25naXR1ZGUsIFwiXFx0XCIsIGMuTWkpKTtcclxuICBhd2FpdCB3cml0ZVRvSnNvbkFuZENzdignZGF0YS9yZXBlYXRlcnMvY29tYmluZWQvQ08nLCBjb21iaW5lZCk7XHJcbn0pKCk7XHJcbiJdfQ==