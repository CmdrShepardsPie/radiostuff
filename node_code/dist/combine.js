"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_helpers_1 = require("@helpers/fs-helpers");
const helpers_1 = require("@helpers/helpers");
const log_helpers_1 = require("@helpers/log-helpers");
const gps_distance_1 = __importDefault(require("gps-distance"));
const log = log_helpers_1.createLog('Combine');
exports.default = (async () => {
    const myPoint = [39.627071500, -104.893322500]; // 4982 S Ulster St
    const combined = [];
    const files = await fs_helpers_1.getAllFilesFromDirectory('../data/repeaters/results/CO');
    log('Got', files.length, 'files');
    const found = {};
    files.forEach((file) => {
        log('Got', file.length, 'repeaters');
        file.forEach((item) => {
            if (!found[`${item.state_id}-${item.ID}`]) {
                found[`${item.state_id}-${item.ID}`] = true;
                combined.push(item);
                const distance = gps_distance_1.default([myPoint, [item.Latitude, item.Longitude]]);
                item.Mi = distance * 0.62137119;
            }
        });
    });
    log('Got', combined.length, 'unique repeaters');
    combined.sort((a, b) => {
        const aMi = helpers_1.numberToString(a.Mi || 0, 4, 24);
        const bMi = helpers_1.numberToString(b.Mi || 0, 4, 24);
        const aRepeaterName = a.Call;
        const bRepeaterName = b.Call;
        const aFrequency = helpers_1.numberToString(a.Frequency || 0, 4, 5);
        const bFrequency = helpers_1.numberToString(b.Frequency || 0, 4, 5);
        const aStr = `${aMi} ${aRepeaterName} ${aFrequency}`;
        const bStr = `${bMi} ${bRepeaterName} ${bFrequency}`;
        return aStr > bStr ? 1 : aStr < bStr ? -1 : 0;
    });
    const stats = combined.reduce((result, data) => {
        const freq = Math.round(data.Frequency || 0).toString();
        const pow = Math.pow(10, Math.max(freq.length - 2, 0)) * 2;
        const group = Math.round((data.Frequency || 0) / pow) * pow;
        // console.log(freq, pow, group);
        const count = result[group] || 0;
        return { ...result, [group]: count + 1 };
    }, {});
    // tslint:disable-next-line:no-console
    console.log('STATS', stats);
    // combined.slice(0, 100).forEach((c) => log(c.Call, "\t", c.Latitude, "\t", c.Longitude, "\t", c.Mi));
    await fs_helpers_1.writeToJsonAndCsv('../data/repeaters/combined/CO', combined);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYmluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21iaW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQWtGO0FBQ2xGLDhDQUFrRDtBQUNsRCxzREFBaUQ7QUFFakQsZ0VBQWtEO0FBRWxELE1BQU0sR0FBRyxHQUE0Qix1QkFBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRTFELGtCQUFlLENBQUMsS0FBSyxJQUFtQixFQUFFO0lBQ3hDLE1BQU0sT0FBTyxHQUFVLENBQUMsWUFBWSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxtQkFBbUI7SUFDMUUsTUFBTSxRQUFRLEdBQW1CLEVBQUUsQ0FBQztJQUNwQyxNQUFNLEtBQUssR0FBcUIsTUFBTSxxQ0FBd0IsQ0FBaUIsOEJBQThCLENBQUMsQ0FBQztJQUMvRyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEMsTUFBTSxLQUFLLEdBQTJDLEVBQUUsQ0FBQztJQUN6RCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBb0IsRUFBRSxFQUFFO1FBQ3JDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBa0IsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUN6QyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztnQkFDNUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEIsTUFBTSxRQUFRLEdBQVcsc0JBQVcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakYsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLEdBQUcsVUFBVSxDQUFDO2FBQ2pDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILEdBQUcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2hELFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFlLEVBQUUsQ0FBZSxFQUFFLEVBQUU7UUFDakQsTUFBTSxHQUFHLEdBQVcsd0JBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckQsTUFBTSxHQUFHLEdBQVcsd0JBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckQsTUFBTSxhQUFhLEdBQXVCLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakQsTUFBTSxhQUFhLEdBQXVCLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakQsTUFBTSxVQUFVLEdBQVcsd0JBQWMsQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEUsTUFBTSxVQUFVLEdBQVcsd0JBQWMsQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEUsTUFBTSxJQUFJLEdBQVcsR0FBRyxHQUFHLElBQUksYUFBYSxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQzdELE1BQU0sSUFBSSxHQUFXLEdBQUcsR0FBRyxJQUFJLGFBQWEsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUU3RCxPQUFPLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sS0FBSyxHQUErQixRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBbUMsRUFBRSxJQUFrQixFQUFFLEVBQUU7UUFDcEgsTUFBTSxJQUFJLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hFLE1BQU0sR0FBRyxHQUFXLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkUsTUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3BFLGlDQUFpQztRQUNqQyxNQUFNLEtBQUssR0FBVyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUMzQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDUCxzQ0FBc0M7SUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUIsdUdBQXVHO0lBQ3ZHLE1BQU0sOEJBQWlCLENBQUMsK0JBQStCLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDckUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFsbEZpbGVzRnJvbURpcmVjdG9yeSwgd3JpdGVUb0pzb25BbmRDc3YgfSBmcm9tICdAaGVscGVycy9mcy1oZWxwZXJzJztcbmltcG9ydCB7IG51bWJlclRvU3RyaW5nIH0gZnJvbSAnQGhlbHBlcnMvaGVscGVycyc7XG5pbXBvcnQgeyBjcmVhdGVMb2cgfSBmcm9tICdAaGVscGVycy9sb2ctaGVscGVycyc7XG5pbXBvcnQgeyBJUmVwZWF0ZXJSYXcgfSBmcm9tICdAaW50ZXJmYWNlcy9pLXJlcGVhdGVyLXJhdyc7XG5pbXBvcnQgZ3BzRGlzdGFuY2UsIHsgUG9pbnQgfSBmcm9tICdncHMtZGlzdGFuY2UnO1xuXG5jb25zdCBsb2c6ICguLi5tc2c6IGFueVtdKSA9PiB2b2lkID0gY3JlYXRlTG9nKCdDb21iaW5lJyk7XG5cbmV4cG9ydCBkZWZhdWx0IChhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IG15UG9pbnQ6IFBvaW50ID0gWzM5LjYyNzA3MTUwMCwgLTEwNC44OTMzMjI1MDBdOyAvLyA0OTgyIFMgVWxzdGVyIFN0XG4gIGNvbnN0IGNvbWJpbmVkOiBJUmVwZWF0ZXJSYXdbXSA9IFtdO1xuICBjb25zdCBmaWxlczogSVJlcGVhdGVyUmF3W11bXSA9IGF3YWl0IGdldEFsbEZpbGVzRnJvbURpcmVjdG9yeTxJUmVwZWF0ZXJSYXdbXT4oJy4uL2RhdGEvcmVwZWF0ZXJzL3Jlc3VsdHMvQ08nKTtcbiAgbG9nKCdHb3QnLCBmaWxlcy5sZW5ndGgsICdmaWxlcycpO1xuICBjb25zdCBmb3VuZDogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIHwgdW5kZWZpbmVkIH0gPSB7fTtcbiAgZmlsZXMuZm9yRWFjaCgoZmlsZTogSVJlcGVhdGVyUmF3W10pID0+IHtcbiAgICBsb2coJ0dvdCcsIGZpbGUubGVuZ3RoLCAncmVwZWF0ZXJzJyk7XG4gICAgZmlsZS5mb3JFYWNoKChpdGVtOiBJUmVwZWF0ZXJSYXcpID0+IHtcbiAgICAgIGlmICghZm91bmRbYCR7aXRlbS5zdGF0ZV9pZH0tJHtpdGVtLklEfWBdKSB7XG4gICAgICAgIGZvdW5kW2Ake2l0ZW0uc3RhdGVfaWR9LSR7aXRlbS5JRH1gXSA9IHRydWU7XG4gICAgICAgIGNvbWJpbmVkLnB1c2goaXRlbSk7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlOiBudW1iZXIgPSBncHNEaXN0YW5jZShbbXlQb2ludCwgW2l0ZW0uTGF0aXR1ZGUsIGl0ZW0uTG9uZ2l0dWRlXV0pO1xuICAgICAgICBpdGVtLk1pID0gZGlzdGFuY2UgKiAwLjYyMTM3MTE5O1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgbG9nKCdHb3QnLCBjb21iaW5lZC5sZW5ndGgsICd1bmlxdWUgcmVwZWF0ZXJzJyk7XG4gIGNvbWJpbmVkLnNvcnQoKGE6IElSZXBlYXRlclJhdywgYjogSVJlcGVhdGVyUmF3KSA9PiB7XG4gICAgY29uc3QgYU1pOiBzdHJpbmcgPSBudW1iZXJUb1N0cmluZyhhLk1pIHx8IDAsIDQsIDI0KTtcbiAgICBjb25zdCBiTWk6IHN0cmluZyA9IG51bWJlclRvU3RyaW5nKGIuTWkgfHwgMCwgNCwgMjQpO1xuICAgIGNvbnN0IGFSZXBlYXRlck5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGEuQ2FsbDtcbiAgICBjb25zdCBiUmVwZWF0ZXJOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBiLkNhbGw7XG4gICAgY29uc3QgYUZyZXF1ZW5jeTogc3RyaW5nID0gbnVtYmVyVG9TdHJpbmcoYS5GcmVxdWVuY3kgfHwgMCwgNCwgNSk7XG4gICAgY29uc3QgYkZyZXF1ZW5jeTogc3RyaW5nID0gbnVtYmVyVG9TdHJpbmcoYi5GcmVxdWVuY3kgfHwgMCwgNCwgNSk7XG4gICAgY29uc3QgYVN0cjogc3RyaW5nID0gYCR7YU1pfSAke2FSZXBlYXRlck5hbWV9ICR7YUZyZXF1ZW5jeX1gO1xuICAgIGNvbnN0IGJTdHI6IHN0cmluZyA9IGAke2JNaX0gJHtiUmVwZWF0ZXJOYW1lfSAke2JGcmVxdWVuY3l9YDtcblxuICAgIHJldHVybiBhU3RyID4gYlN0ciA/IDEgOiBhU3RyIDwgYlN0ciA/IC0xIDogMDtcbiAgfSk7XG4gIGNvbnN0IHN0YXRzOiB7IFsga2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IGNvbWJpbmVkLnJlZHVjZSgocmVzdWx0OiB7IFsga2V5OiBzdHJpbmcgXTogbnVtYmVyIH0sIGRhdGE6IElSZXBlYXRlclJhdykgPT4ge1xuICAgIGNvbnN0IGZyZXE6IHN0cmluZyA9IE1hdGgucm91bmQoZGF0YS5GcmVxdWVuY3kgfHwgMCkudG9TdHJpbmcoKTtcbiAgICBjb25zdCBwb3c6IG51bWJlciA9IE1hdGgucG93KDEwLCBNYXRoLm1heChmcmVxLmxlbmd0aCAtIDIsIDApKSAqIDI7XG4gICAgY29uc3QgZ3JvdXA6IG51bWJlciA9IE1hdGgucm91bmQoKGRhdGEuRnJlcXVlbmN5IHx8IDApIC8gcG93KSAqIHBvdztcbiAgICAvLyBjb25zb2xlLmxvZyhmcmVxLCBwb3csIGdyb3VwKTtcbiAgICBjb25zdCBjb3VudDogbnVtYmVyID0gcmVzdWx0W2dyb3VwXSB8fCAwO1xuICAgIHJldHVybiB7IC4uLnJlc3VsdCwgW2dyb3VwXTogY291bnQgKyAxIH07XG4gIH0sIHt9KTtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgY29uc29sZS5sb2coJ1NUQVRTJywgc3RhdHMpO1xuICAvLyBjb21iaW5lZC5zbGljZSgwLCAxMDApLmZvckVhY2goKGMpID0+IGxvZyhjLkNhbGwsIFwiXFx0XCIsIGMuTGF0aXR1ZGUsIFwiXFx0XCIsIGMuTG9uZ2l0dWRlLCBcIlxcdFwiLCBjLk1pKSk7XG4gIGF3YWl0IHdyaXRlVG9Kc29uQW5kQ3N2KCcuLi9kYXRhL3JlcGVhdGVycy9jb21iaW5lZC9DTycsIGNvbWJpbmVkKTtcbn0pKCk7XG4iXX0=