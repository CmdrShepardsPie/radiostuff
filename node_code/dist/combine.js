"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_helpers_1 = require("@helpers/fs-helpers");
const helpers_1 = require("@helpers/helpers");
const log_helpers_1 = require("@helpers/log-helpers");
const gps_distance_1 = __importDefault(require("gps-distance"));
const log = log_helpers_1.createLog("Combine");
exports.default = (async () => {
    const myPoint = [39.627071500, -104.893322500];
    const combined = [];
    const files = await fs_helpers_1.getAllFilesFromDirectory("../data/repeaters/results/CO");
    log("Got", files.length, "files");
    const found = {};
    files.forEach((file) => {
        log("Got", file.length, "repeaters");
        file.forEach((item) => {
            if (!found[`${item.state_id}-${item.ID}`]) {
                found[`${item.state_id}-${item.ID}`] = true;
                combined.push(item);
                const distance = gps_distance_1.default([myPoint, [item.Latitude, item.Longitude]]);
                item.Mi = distance * 0.62137119;
            }
        });
    });
    log("Got", combined.length, "unique repeaters");
    combined.sort((a, b) => {
        const aMi = helpers_1.numberToString(a.Mi || 0, 4, 24);
        const bMi = helpers_1.numberToString(b.Mi || 0, 4, 24);
        const aRepeaterName = a.Call;
        const bRepeaterName = b.Call;
        const aFrequency = helpers_1.numberToString(a.Frequency || 0, 4, 5);
        const bFrequency = helpers_1.numberToString(b.Frequency || 0, 4, 5);
        const aStr = `${aMi} ${aRepeaterName} ${aFrequency}`;
        const bStr = `${bMi} ${bRepeaterName} ${bFrequency}`;
        return aStr > bStr ? 1 : aStr < bStr ? -1 : 0;
    });
    const stats = combined.reduce((result, data) => {
        const freq = Math.round(data.Frequency || 0).toString();
        const pow = Math.pow(10, Math.max(freq.length - 2, 0)) * 2;
        const group = Math.round((data.Frequency || 0) / pow) * pow;
        // console.log(freq, pow, group);
        const count = result[group] || 0;
        return { ...result, [group]: count + 1 };
    }, {});
    // tslint:disable-next-line:no-console
    console.log("STATS", stats);
    // combined.slice(0, 100).forEach((c) => log(c.Call, "\t", c.Latitude, "\t", c.Longitude, "\t", c.Mi));
    await fs_helpers_1.writeToJsonAndCsv("../data/repeaters/combined/CO", combined);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYmluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21iaW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQWtGO0FBQ2xGLDhDQUFrRDtBQUNsRCxzREFBaUQ7QUFFakQsZ0VBQWtEO0FBRWxELE1BQU0sR0FBRyxHQUE0Qix1QkFBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRTFELGtCQUFlLENBQUMsS0FBSyxJQUFtQixFQUFFO0lBQ3hDLE1BQU0sT0FBTyxHQUFVLENBQUMsWUFBWSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdEQsTUFBTSxRQUFRLEdBQW1CLEVBQUUsQ0FBQztJQUNwQyxNQUFNLEtBQUssR0FBcUIsTUFBTSxxQ0FBd0IsQ0FBaUIsOEJBQThCLENBQUMsQ0FBQztJQUMvRyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEMsTUFBTSxLQUFLLEdBQTJDLEVBQUUsQ0FBQztJQUN6RCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBb0IsRUFBRSxFQUFFO1FBQ3JDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBa0IsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUN6QyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztnQkFDNUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEIsTUFBTSxRQUFRLEdBQVcsc0JBQVcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakYsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLEdBQUcsVUFBVSxDQUFDO2FBQ2pDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILEdBQUcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2hELFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFlLEVBQUUsQ0FBZSxFQUFFLEVBQUU7UUFDakQsTUFBTSxHQUFHLEdBQVcsd0JBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckQsTUFBTSxHQUFHLEdBQVcsd0JBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckQsTUFBTSxhQUFhLEdBQXVCLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakQsTUFBTSxhQUFhLEdBQXVCLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakQsTUFBTSxVQUFVLEdBQVcsd0JBQWMsQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEUsTUFBTSxVQUFVLEdBQVcsd0JBQWMsQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEUsTUFBTSxJQUFJLEdBQVcsR0FBRyxHQUFHLElBQUksYUFBYSxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQzdELE1BQU0sSUFBSSxHQUFXLEdBQUcsR0FBRyxJQUFJLGFBQWEsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUU3RCxPQUFPLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sS0FBSyxHQUE4QixRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBaUMsRUFBRSxJQUFrQixFQUFFLEVBQUU7UUFDakgsTUFBTSxJQUFJLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hFLE1BQU0sR0FBRyxHQUFXLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkUsTUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3BFLGlDQUFpQztRQUNqQyxNQUFNLEtBQUssR0FBVyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUMzQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDUCxzQ0FBc0M7SUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUIsdUdBQXVHO0lBQ3ZHLE1BQU0sOEJBQWlCLENBQUMsK0JBQStCLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDckUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFsbEZpbGVzRnJvbURpcmVjdG9yeSwgd3JpdGVUb0pzb25BbmRDc3YgfSBmcm9tIFwiQGhlbHBlcnMvZnMtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyBudW1iZXJUb1N0cmluZyB9IGZyb20gXCJAaGVscGVycy9oZWxwZXJzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUxvZyB9IGZyb20gXCJAaGVscGVycy9sb2ctaGVscGVyc1wiO1xyXG5pbXBvcnQgeyBJUmVwZWF0ZXJSYXcgfSBmcm9tIFwiQGludGVyZmFjZXMvaS1yZXBlYXRlci1yYXdcIjtcclxuaW1wb3J0IGdwc0Rpc3RhbmNlLCB7IFBvaW50IH0gZnJvbSBcImdwcy1kaXN0YW5jZVwiO1xyXG5cclxuY29uc3QgbG9nOiAoLi4ubXNnOiBhbnlbXSkgPT4gdm9pZCA9IGNyZWF0ZUxvZyhcIkNvbWJpbmVcIik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gIGNvbnN0IG15UG9pbnQ6IFBvaW50ID0gWzM5LjYyNzA3MTUwMCwgLTEwNC44OTMzMjI1MDBdO1xyXG4gIGNvbnN0IGNvbWJpbmVkOiBJUmVwZWF0ZXJSYXdbXSA9IFtdO1xyXG4gIGNvbnN0IGZpbGVzOiBJUmVwZWF0ZXJSYXdbXVtdID0gYXdhaXQgZ2V0QWxsRmlsZXNGcm9tRGlyZWN0b3J5PElSZXBlYXRlclJhd1tdPihcIi4uL2RhdGEvcmVwZWF0ZXJzL3Jlc3VsdHMvQ09cIik7XHJcbiAgbG9nKFwiR290XCIsIGZpbGVzLmxlbmd0aCwgXCJmaWxlc1wiKTtcclxuICBjb25zdCBmb3VuZDogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIHwgdW5kZWZpbmVkIH0gPSB7fTtcclxuICBmaWxlcy5mb3JFYWNoKChmaWxlOiBJUmVwZWF0ZXJSYXdbXSkgPT4ge1xyXG4gICAgbG9nKFwiR290XCIsIGZpbGUubGVuZ3RoLCBcInJlcGVhdGVyc1wiKTtcclxuICAgIGZpbGUuZm9yRWFjaCgoaXRlbTogSVJlcGVhdGVyUmF3KSA9PiB7XHJcbiAgICAgIGlmICghZm91bmRbYCR7aXRlbS5zdGF0ZV9pZH0tJHtpdGVtLklEfWBdKSB7XHJcbiAgICAgICAgZm91bmRbYCR7aXRlbS5zdGF0ZV9pZH0tJHtpdGVtLklEfWBdID0gdHJ1ZTtcclxuICAgICAgICBjb21iaW5lZC5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlOiBudW1iZXIgPSBncHNEaXN0YW5jZShbbXlQb2ludCwgW2l0ZW0uTGF0aXR1ZGUsIGl0ZW0uTG9uZ2l0dWRlXV0pO1xyXG4gICAgICAgIGl0ZW0uTWkgPSBkaXN0YW5jZSAqIDAuNjIxMzcxMTk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIGxvZyhcIkdvdFwiLCBjb21iaW5lZC5sZW5ndGgsIFwidW5pcXVlIHJlcGVhdGVyc1wiKTtcclxuICBjb21iaW5lZC5zb3J0KChhOiBJUmVwZWF0ZXJSYXcsIGI6IElSZXBlYXRlclJhdykgPT4ge1xyXG4gICAgY29uc3QgYU1pOiBzdHJpbmcgPSBudW1iZXJUb1N0cmluZyhhLk1pIHx8IDAsIDQsIDI0KTtcclxuICAgIGNvbnN0IGJNaTogc3RyaW5nID0gbnVtYmVyVG9TdHJpbmcoYi5NaSB8fCAwLCA0LCAyNCk7XHJcbiAgICBjb25zdCBhUmVwZWF0ZXJOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBhLkNhbGw7XHJcbiAgICBjb25zdCBiUmVwZWF0ZXJOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBiLkNhbGw7XHJcbiAgICBjb25zdCBhRnJlcXVlbmN5OiBzdHJpbmcgPSBudW1iZXJUb1N0cmluZyhhLkZyZXF1ZW5jeSB8fCAwLCA0LCA1KTtcclxuICAgIGNvbnN0IGJGcmVxdWVuY3k6IHN0cmluZyA9IG51bWJlclRvU3RyaW5nKGIuRnJlcXVlbmN5IHx8IDAsIDQsIDUpO1xyXG4gICAgY29uc3QgYVN0cjogc3RyaW5nID0gYCR7YU1pfSAke2FSZXBlYXRlck5hbWV9ICR7YUZyZXF1ZW5jeX1gO1xyXG4gICAgY29uc3QgYlN0cjogc3RyaW5nID0gYCR7Yk1pfSAke2JSZXBlYXRlck5hbWV9ICR7YkZyZXF1ZW5jeX1gO1xyXG5cclxuICAgIHJldHVybiBhU3RyID4gYlN0ciA/IDEgOiBhU3RyIDwgYlN0ciA/IC0xIDogMDtcclxuICB9KTtcclxuICBjb25zdCBzdGF0czogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IGNvbWJpbmVkLnJlZHVjZSgocmVzdWx0OiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9LCBkYXRhOiBJUmVwZWF0ZXJSYXcpID0+IHtcclxuICAgIGNvbnN0IGZyZXE6IHN0cmluZyA9IE1hdGgucm91bmQoZGF0YS5GcmVxdWVuY3kgfHwgMCkudG9TdHJpbmcoKTtcclxuICAgIGNvbnN0IHBvdzogbnVtYmVyID0gTWF0aC5wb3coMTAsIE1hdGgubWF4KGZyZXEubGVuZ3RoIC0gMiwgMCkpICogMjtcclxuICAgIGNvbnN0IGdyb3VwOiBudW1iZXIgPSBNYXRoLnJvdW5kKChkYXRhLkZyZXF1ZW5jeSB8fCAwKSAvIHBvdykgKiBwb3c7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhmcmVxLCBwb3csIGdyb3VwKTtcclxuICAgIGNvbnN0IGNvdW50OiBudW1iZXIgPSByZXN1bHRbZ3JvdXBdIHx8IDA7XHJcbiAgICByZXR1cm4geyAuLi5yZXN1bHQsIFtncm91cF06IGNvdW50ICsgMSB9O1xyXG4gIH0sIHt9KTtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxyXG4gIGNvbnNvbGUubG9nKFwiU1RBVFNcIiwgc3RhdHMpO1xyXG4gIC8vIGNvbWJpbmVkLnNsaWNlKDAsIDEwMCkuZm9yRWFjaCgoYykgPT4gbG9nKGMuQ2FsbCwgXCJcXHRcIiwgYy5MYXRpdHVkZSwgXCJcXHRcIiwgYy5Mb25naXR1ZGUsIFwiXFx0XCIsIGMuTWkpKTtcclxuICBhd2FpdCB3cml0ZVRvSnNvbkFuZENzdihcIi4uL2RhdGEvcmVwZWF0ZXJzL2NvbWJpbmVkL0NPXCIsIGNvbWJpbmVkKTtcclxufSkoKTtcclxuIl19