"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_helpers_1 = require("@helpers/fs-helpers");
const helpers_1 = require("@helpers/helpers");
const log_helpers_1 = require("@helpers/log-helpers");
const axios_1 = __importDefault(require("axios"));
const chalk_1 = __importDefault(require("chalk"));
const jsdom_1 = require("jsdom");
const helper_1 = require("./helper");
const { log, write } = log_helpers_1.createOut("Scraper");
// const write = createWrite("Scraper");
class Scraper {
    constructor(location, distance) {
        this.location = location;
        this.distance = distance;
        this.data = [];
        this.cacheStart = Date.now();
        log(chalk_1.default.green("New Scraper"), location, distance);
        this.url = `https://www.repeaterbook.com/repeaters/prox_result.php?city=${encodeURIComponent(location.toString())}&distance=${distance}&Dunit=m&band1=%25&band2=&freq=&call=&features%5B%5D=&status_id=%25&use=%25&order=distance_calc%2C+state_id%2C+%60call%60+ASC`;
    }
    async process() {
        log(chalk_1.default.green("Process"));
        const parts = this.location.toString().split(`,`);
        const baseKey = `${(parts[1] || ".").trim()}/${parts[0].trim()}.html`;
        const page = await this.getUrl(this.url, baseKey);
        const dom = new jsdom_1.JSDOM(page);
        await this.getRepeaterList(dom.window.document);
        return this.data;
    }
    async getRepeaterList(document) {
        log(chalk_1.default.green("Get Repeater List"));
        const table = document.querySelector("table.w3-table.w3-striped.w3-responsive");
        if (table) {
            const rows = [...table.querySelectorAll("tbody > tr")];
            const headerRow = rows.shift();
            if (headerRow) {
                const headerCells = [...headerRow.querySelectorAll("th")];
                const headers = headerCells.map((th) => helper_1.getText(th));
                for (const row of rows) {
                    const data = {};
                    const cells = [...row.querySelectorAll("td")];
                    cells.forEach((td, index) => data[headers[index]] = helper_1.getTextOrNumber(td));
                    const link = cells[0].querySelector("a");
                    if (link) {
                        write("^");
                        Object.assign(data, await this.getRepeaterDetails(link.href));
                        write("_");
                    }
                    this.data.push(data);
                }
            }
        }
    }
    async getRepeaterDetails(href) {
        const urlParams = href.split("?")[1];
        const keyParts = urlParams.match(/state_id=(\d+)&ID=(\d+)/) || [];
        const key = `${keyParts[1]}/${keyParts[2]}.html`;
        const page = await this.getUrl(`https://www.repeaterbook.com/repeaters/${href}`, key);
        const dom = new jsdom_1.JSDOM(page);
        const data = {};
        data.state_id = keyParts[1];
        data.ID = keyParts[2];
        const menus = [...dom.window.document.querySelectorAll("#cssmenu a")];
        const locationRegex = /(-?\d*\.?\d*)\+(-?\d*\.?\d*)/i;
        for (const menu of menus) {
            const locationMatch = menu.href.match(locationRegex);
            if (locationMatch) {
                const lat = helper_1.getNumber(locationMatch[1]);
                const long = helper_1.getNumber(locationMatch[2]);
                if (!isNaN(lat)) {
                    data.Latitude = lat;
                }
                if (!isNaN(long)) {
                    data.Longitude = long;
                }
                break;
            }
        }
        const table = dom.window.document.querySelector("table.w3-table.w3-responsive");
        if (table) {
            const rows = [...table.querySelectorAll("tbody > tr")];
            for (const row of rows) {
                const cells = [...row.querySelectorAll("td")];
                const title = helper_1.getText(cells[0]);
                const value = helper_1.getTextOrNumber(cells[1]);
                const dataKey = title.split(":")[0].trim();
                const dataVal = title.split(":")[1];
                let updated;
                if (dataVal) {
                    const date = dataVal.match(/(\d{4}-\d{2}-\d{2})/);
                    if (date && date[1]) {
                        updated = date[1];
                    }
                }
                data[dataKey] = updated || value;
            }
        }
        return data;
    }
    async getCache(key) {
        const file = `../data/repeaters/_cache/${key}`;
        if (await fs_helpers_1.dirExists(file)) {
            const stat = await fs_helpers_1.statAsync(file);
            const diff = (this.cacheStart - stat.mtimeMs) / 1000 / 60 / 60;
            if (diff >= 1) {
                write("X");
                return;
            }
            return (await fs_helpers_1.readFileAsync(file)).toString();
        }
    }
    async setCache(key, value) {
        const file = `../data/repeaters/_cache/${key}`;
        await fs_helpers_1.makeDirs(file);
        return fs_helpers_1.writeFileAsync(file, value);
    }
    async getUrl(url, cacheKey) {
        // log(chalk.green("Get URL"), url, cacheKey);
        const cache = await this.getCache(cacheKey || url);
        if (cache) {
            // log(chalk.yellow("Cached"), url, cacheKey);
            write("<");
            return cache;
        }
        else {
            // Slow down the requests a little bit so we"re not hammering the server or triggering any anti-bot or DDoS protections
            const waitTime = (5000 + (Math.random() * 10000));
            await helpers_1.wait(waitTime);
            // log(chalk.yellow("Get"), url);
            const request = await axios_1.default.get(url);
            // log(chalk.green("Got"), url);
            write(">");
            const data = request.data;
            await this.setCache(cacheKey || url, data);
            return data;
        }
    }
}
exports.default = Scraper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyYXBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2R1bGVzL3NjcmFwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxvREFBa0c7QUFDbEcsOENBQXdDO0FBQ3hDLHNEQUFpRDtBQUVqRCxrREFBNkM7QUFDN0Msa0RBQTBCO0FBQzFCLGlDQUE4QjtBQUM5QixxQ0FBK0Q7QUFHL0QsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBcUUsdUJBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM5Ryx3Q0FBd0M7QUFFeEMsTUFBcUIsT0FBTztJQU0xQixZQUFvQixRQUF5QixFQUFVLFFBQWdCO1FBQW5ELGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUwvRCxTQUFJLEdBQW1CLEVBQUUsQ0FBQztRQUMxQixlQUFVLEdBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBS3RDLEdBQUcsQ0FBQyxlQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsR0FBRyxHQUFHLCtEQUErRCxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsYUFBYSxRQUFRLCtIQUErSCxDQUFDO0lBQ3hRLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTztRQUNsQixHQUFHLENBQUMsZUFBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBRTVCLE1BQU0sS0FBSyxHQUFhLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVELE1BQU0sT0FBTyxHQUFXLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxD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QUMsQ0FBQztZQUMzQyxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztDQUNGO0FBeklELDBCQXlJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZGlyRXhpc3RzLCBtYWtlRGlycywgcmVhZEZpbGVBc3luYywgc3RhdEFzeW5jLCB3cml0ZUZpbGVBc3luY30gZnJvbSBcIkBoZWxwZXJzL2ZzLWhlbHBlcnNcIjtcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiQGhlbHBlcnMvaGVscGVyc1wiO1xuaW1wb3J0IHsgY3JlYXRlT3V0IH0gZnJvbSBcIkBoZWxwZXJzL2xvZy1oZWxwZXJzXCI7XG5pbXBvcnQgeyBJUmVwZWF0ZXJSYXcgfSBmcm9tIFwiQGludGVyZmFjZXMvaS1yZXBlYXRlci1yYXdcIjtcbmltcG9ydCBBeGlvcywgeyBBeGlvc1Jlc3BvbnNlIH0gZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgY2hhbGsgZnJvbSBcImNoYWxrXCI7XG5pbXBvcnQgeyBKU0RPTSB9IGZyb20gXCJqc2RvbVwiO1xuaW1wb3J0IHsgZ2V0TnVtYmVyLCBnZXRUZXh0LCBnZXRUZXh0T3JOdW1iZXIgfSBmcm9tIFwiLi9oZWxwZXJcIjtcbmltcG9ydCB7U3RhdHN9IGZyb20gXCJmc1wiO1xuXG5jb25zdCB7IGxvZywgd3JpdGUgfTogeyBsb2c6ICguLi5tc2c6IGFueVtdKSA9PiB2b2lkOyB3cml0ZTogKC4uLm1zZzogYW55W10pID0+IHZvaWQgfSA9IGNyZWF0ZU91dChcIlNjcmFwZXJcIik7XG4vLyBjb25zdCB3cml0ZSA9IGNyZWF0ZVdyaXRlKFwiU2NyYXBlclwiKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NyYXBlciB7XG4gIHByaXZhdGUgZGF0YTogSVJlcGVhdGVyUmF3W10gPSBbXTtcbiAgcHJpdmF0ZSBjYWNoZVN0YXJ0OiBudW1iZXIgPSBEYXRlLm5vdygpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgdXJsOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2NhdGlvbjogc3RyaW5nIHwgbnVtYmVyLCBwcml2YXRlIGRpc3RhbmNlOiBudW1iZXIpIHtcbiAgICBsb2coY2hhbGsuZ3JlZW4oXCJOZXcgU2NyYXBlclwiKSwgbG9jYXRpb24sIGRpc3RhbmNlKTtcbiAgICB0aGlzLnVybCA9IGBodHRwczovL3d3dy5yZXBlYXRlcmJvb2suY29tL3JlcGVhdGVycy9wcm94X3Jlc3VsdC5waHA/Y2l0eT0ke2VuY29kZVVSSUNvbXBvbmVudChsb2NhdGlvbi50b1N0cmluZygpKX0mZGlzdGFuY2U9JHtkaXN0YW5jZX0mRHVuaXQ9bSZiYW5kMT0lMjUmYmFuZDI9JmZyZXE9JmNhbGw9JmZlYXR1cmVzJTVCJTVEPSZzdGF0dXNfaWQ9JTI1JnVzZT0lMjUmb3JkZXI9ZGlzdGFuY2VfY2FsYyUyQytzdGF0ZV9pZCUyQyslNjBjYWxsJTYwK0FTQ2A7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcHJvY2VzcygpOiBQcm9taXNlPElSZXBlYXRlclJhd1tdPiB7XG4gICAgbG9nKGNoYWxrLmdyZWVuKFwiUHJvY2Vzc1wiKSk7XG5cbiAgICBjb25zdCBwYXJ0czogc3RyaW5nW10gPSB0aGlzLmxvY2F0aW9uLnRvU3RyaW5nKCkuc3BsaXQoYCxgKTtcbiAgICBjb25zdCBiYXNlS2V5OiBzdHJpbmcgPSBgJHsocGFydHNbMV0gfHwgXCIuXCIpLnRyaW0oKX0vJHtwYXJ0c1swXS50cmltKCl9Lmh0bWxgO1xuICAgIGNvbnN0IHBhZ2U6IHN0cmluZyA9IGF3YWl0IHRoaXMuZ2V0VXJsKHRoaXMudXJsLCBiYXNlS2V5KTtcbiAgICBjb25zdCBkb206IEpTRE9NID0gbmV3IEpTRE9NKHBhZ2UpO1xuICAgIGF3YWl0IHRoaXMuZ2V0UmVwZWF0ZXJMaXN0KGRvbS53aW5kb3cuZG9jdW1lbnQpO1xuICAgIHJldHVybiB0aGlzLmRhdGE7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldFJlcGVhdGVyTGlzdChkb2N1bWVudDogRG9jdW1lbnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBsb2coY2hhbGsuZ3JlZW4oXCJHZXQgUmVwZWF0ZXIgTGlzdFwiKSk7XG5cbiAgICBjb25zdCB0YWJsZTogSFRNTFRhYmxlRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwidGFibGUudzMtdGFibGUudzMtc3RyaXBlZC53My1yZXNwb25zaXZlXCIpO1xuICAgIGlmICh0YWJsZSkge1xuICAgICAgY29uc3Qgcm93czogSFRNTFRhYmxlUm93RWxlbWVudFtdID0gWy4uLnRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTFRhYmxlUm93RWxlbWVudD4oXCJ0Ym9keSA+IHRyXCIpXTtcbiAgICAgIGNvbnN0IGhlYWRlclJvdzogYW55IHwgdW5kZWZpbmVkID0gcm93cy5zaGlmdCgpO1xuICAgICAgaWYgKGhlYWRlclJvdykge1xuICAgICAgICBjb25zdCBoZWFkZXJDZWxsczogSFRNTFRhYmxlSGVhZGVyQ2VsbEVsZW1lbnRbXSA9IFsuLi5oZWFkZXJSb3cucXVlcnlTZWxlY3RvckFsbChcInRoXCIpXTtcbiAgICAgICAgY29uc3QgaGVhZGVyczogc3RyaW5nW10gPSBoZWFkZXJDZWxscy5tYXAoKHRoOiBIVE1MVGFibGVIZWFkZXJDZWxsRWxlbWVudCkgPT4gZ2V0VGV4dCh0aCkpO1xuICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiByb3dzKSB7XG4gICAgICAgICAgY29uc3QgZGF0YTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQgfSA9IHt9O1xuICAgICAgICAgIGNvbnN0IGNlbGxzOiBIVE1MVGFibGVEYXRhQ2VsbEVsZW1lbnRbXSA9IFsuLi5yb3cucXVlcnlTZWxlY3RvckFsbChcInRkXCIpXTtcbiAgICAgICAgICBjZWxscy5mb3JFYWNoKCh0ZDogSFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50LCBpbmRleDogbnVtYmVyKSA9PiBkYXRhW2hlYWRlcnNbaW5kZXhdXSA9IGdldFRleHRPck51bWJlcih0ZCkpO1xuICAgICAgICAgIGNvbnN0IGxpbms6IEhUTUxBbmNob3JFbGVtZW50IHwgbnVsbCA9IGNlbGxzWzBdLnF1ZXJ5U2VsZWN0b3IoXCJhXCIpO1xuICAgICAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgICAgICB3cml0ZShcIl5cIik7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGRhdGEsIGF3YWl0IHRoaXMuZ2V0UmVwZWF0ZXJEZXRhaWxzKGxpbmsuaHJlZikpO1xuICAgICAgICAgICAgd3JpdGUoXCJfXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmRhdGEucHVzaChkYXRhIGFzIGFueSBhcyBJUmVwZWF0ZXJSYXcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZXRSZXBlYXRlckRldGFpbHMoaHJlZjogc3RyaW5nKTogUHJvbWlzZTxJUmVwZWF0ZXJSYXc+IHtcbiAgICBjb25zdCB1cmxQYXJhbXM6IHN0cmluZyA9IGhyZWYuc3BsaXQoXCI/XCIpWzFdO1xuICAgIGNvbnN0IGtleVBhcnRzOiBSZWdFeHBNYXRjaEFycmF5ID0gdXJsUGFyYW1zLm1hdGNoKC9zdGF0ZV9pZD0oXFxkKykmSUQ9KFxcZCspLykgfHwgW107XG4gICAgY29uc3Qga2V5OiBzdHJpbmcgPSBgJHtrZXlQYXJ0c1sxXX0vJHtrZXlQYXJ0c1syXX0uaHRtbGA7XG4gICAgY29uc3QgcGFnZTogc3RyaW5nID0gYXdhaXQgdGhpcy5nZXRVcmwoYGh0dHBzOi8vd3d3LnJlcGVhdGVyYm9vay5jb20vcmVwZWF0ZXJzLyR7aHJlZn1gLCBrZXkpO1xuICAgIGNvbnN0IGRvbTogSlNET00gPSBuZXcgSlNET00ocGFnZSk7XG4gICAgY29uc3QgZGF0YTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQgfSA9IHt9O1xuICAgIGRhdGEuc3RhdGVfaWQgPSBrZXlQYXJ0c1sxXTtcbiAgICBkYXRhLklEID0ga2V5UGFydHNbMl07XG4gICAgY29uc3QgbWVudXM6IEhUTUxBbmNob3JFbGVtZW50W10gPSBbLi4uZG9tLndpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxBbmNob3JFbGVtZW50PihcIiNjc3NtZW51IGFcIildO1xuICAgIGNvbnN0IGxvY2F0aW9uUmVnZXg6IFJlZ0V4cCA9IC8oLT9cXGQqXFwuP1xcZCopXFwrKC0/XFxkKlxcLj9cXGQqKS9pO1xuICAgIGZvciAoY29uc3QgbWVudSBvZiBtZW51cykge1xuICAgICAgY29uc3QgbG9jYXRpb25NYXRjaDogUmVnRXhwTWF0Y2hBcnJheSB8IG51bGwgPSBtZW51LmhyZWYubWF0Y2gobG9jYXRpb25SZWdleCk7XG4gICAgICBpZiAobG9jYXRpb25NYXRjaCkge1xuICAgICAgICBjb25zdCBsYXQ6IG51bWJlciA9IGdldE51bWJlcihsb2NhdGlvbk1hdGNoWzFdKTtcbiAgICAgICAgY29uc3QgbG9uZzogbnVtYmVyID0gZ2V0TnVtYmVyKGxvY2F0aW9uTWF0Y2hbMl0pO1xuICAgICAgICBpZiAoIWlzTmFOKGxhdCkpIHtcbiAgICAgICAgICBkYXRhLkxhdGl0dWRlID0gbGF0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNOYU4obG9uZykpIHtcbiAgICAgICAgICBkYXRhLkxvbmdpdHVkZSA9IGxvbmc7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHRhYmxlOiBFbGVtZW50IHwgbnVsbCA9IGRvbS53aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInRhYmxlLnczLXRhYmxlLnczLXJlc3BvbnNpdmVcIik7XG4gICAgaWYgKHRhYmxlKSB7XG4gICAgICBjb25zdCByb3dzOiBIVE1MVGFibGVSb3dFbGVtZW50W10gPSBbLi4udGFibGUucXVlcnlTZWxlY3RvckFsbDxIVE1MVGFibGVSb3dFbGVtZW50PihcInRib2R5ID4gdHJcIildO1xuICAgICAgZm9yIChjb25zdCByb3cgb2Ygcm93cykge1xuICAgICAgICBjb25zdCBjZWxsczogSFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50W10gPSBbLi4ucm93LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0ZFwiKV07XG4gICAgICAgIGNvbnN0IHRpdGxlOiBzdHJpbmcgPSBnZXRUZXh0KGNlbGxzWzBdKTtcbiAgICAgICAgY29uc3QgdmFsdWU6IG51bWJlciB8IHN0cmluZyA9IGdldFRleHRPck51bWJlcihjZWxsc1sxXSk7XG4gICAgICAgIGNvbnN0IGRhdGFLZXk6IHN0cmluZyA9IHRpdGxlLnNwbGl0KFwiOlwiKVswXS50cmltKCk7XG4gICAgICAgIGNvbnN0IGRhdGFWYWw6IHN0cmluZyA9IHRpdGxlLnNwbGl0KFwiOlwiKVsxXTtcbiAgICAgICAgbGV0IHVwZGF0ZWQ6IG51bWJlciB8IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGRhdGFWYWwpIHtcbiAgICAgICAgICBjb25zdCBkYXRlOiBSZWdFeHBNYXRjaEFycmF5IHwgbnVsbCA9IGRhdGFWYWwubWF0Y2goLyhcXGR7NH0tXFxkezJ9LVxcZHsyfSkvKTtcbiAgICAgICAgICBpZiAoZGF0ZSAmJiBkYXRlWzFdKSB7XG4gICAgICAgICAgICB1cGRhdGVkID0gZGF0ZVsxXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGF0YVtkYXRhS2V5XSA9IHVwZGF0ZWQgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhIGFzIGFueSBhcyBJUmVwZWF0ZXJSYXc7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldENhY2hlKGtleTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICBjb25zdCBmaWxlOiBzdHJpbmcgPSBgLi4vZGF0YS9yZXBlYXRlcnMvX2NhY2hlLyR7a2V5fWA7XG4gICAgaWYgKGF3YWl0IGRpckV4aXN0cyhmaWxlKSkge1xuICAgICAgY29uc3Qgc3RhdDogU3RhdHMgPSBhd2FpdCBzdGF0QXN5bmMoZmlsZSk7XG4gICAgICBjb25zdCBkaWZmOiBudW1iZXIgPSAodGhpcy5jYWNoZVN0YXJ0IC0gc3RhdC5tdGltZU1zKSAvIDEwMDAgLyA2MCAvIDYwO1xuICAgICAgaWYgKGRpZmYgPj0gMSkge1xuICAgICAgICB3cml0ZShcIlhcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoYXdhaXQgcmVhZEZpbGVBc3luYyhmaWxlKSkudG9TdHJpbmcoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNldENhY2hlKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgZmlsZTogc3RyaW5nID0gYC4uL2RhdGEvcmVwZWF0ZXJzL19jYWNoZS8ke2tleX1gO1xuICAgIGF3YWl0IG1ha2VEaXJzKGZpbGUpO1xuICAgIHJldHVybiB3cml0ZUZpbGVBc3luYyhmaWxlLCB2YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldFVybCh1cmw6IHN0cmluZywgY2FjaGVLZXk/OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIC8vIGxvZyhjaGFsay5ncmVlbihcIkdldCBVUkxcIiksIHVybCwgY2FjaGVLZXkpO1xuXG4gICAgY29uc3QgY2FjaGU6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGF3YWl0IHRoaXMuZ2V0Q2FjaGUoY2FjaGVLZXkgfHwgdXJsKTtcbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgIC8vIGxvZyhjaGFsay55ZWxsb3coXCJDYWNoZWRcIiksIHVybCwgY2FjaGVLZXkpO1xuICAgICAgd3JpdGUoXCI8XCIpO1xuICAgICAgcmV0dXJuIGNhY2hlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTbG93IGRvd24gdGhlIHJlcXVlc3RzIGEgbGl0dGxlIGJpdCBzbyB3ZVwicmUgbm90IGhhbW1lcmluZyB0aGUgc2VydmVyIG9yIHRyaWdnZXJpbmcgYW55IGFudGktYm90IG9yIEREb1MgcHJvdGVjdGlvbnNcbiAgICAgIGNvbnN0IHdhaXRUaW1lOiBudW1iZXIgPSAoNTAwMCArIChNYXRoLnJhbmRvbSgpICogMTAwMDApKTtcblxuICAgICAgYXdhaXQgd2FpdCh3YWl0VGltZSk7XG4gICAgICAvLyBsb2coY2hhbGsueWVsbG93KFwiR2V0XCIpLCB1cmwpO1xuICAgICAgY29uc3QgcmVxdWVzdDogQXhpb3NSZXNwb25zZTxzdHJpbmc+ID0gYXdhaXQgQXhpb3MuZ2V0KHVybCk7XG4gICAgICAvLyBsb2coY2hhbGsuZ3JlZW4oXCJHb3RcIiksIHVybCk7XG4gICAgICB3cml0ZShcIj5cIik7XG5cbiAgICAgIGNvbnN0IGRhdGE6IHN0cmluZyA9IHJlcXVlc3QuZGF0YTtcbiAgICAgIGF3YWl0IHRoaXMuc2V0Q2FjaGUoY2FjaGVLZXkgfHwgdXJsLCBkYXRhKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxufVxuIl19