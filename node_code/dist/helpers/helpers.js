"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const log_helpers_1 = require("@helpers/log-helpers");
const chalk_1 = __importDefault(require("chalk"));
const log = log_helpers_1.createLog('Helpers');
function wait(ms, fn) {
    log(chalk_1.default.green('Wait'), ms);
    return new Promise((resolve, reject) => {
        setTimeout(async () => {
            try {
                resolve(fn && (await fn()));
            }
            catch (e) {
                reject(e);
            }
        }, ms);
    });
}
exports.wait = wait;
function numberToString(num, major, minor) {
    let str = num.toString();
    const split = str.split('.');
    if (major !== undefined) {
        if (split[0] === undefined) {
            split[0] = '0';
        }
        while (split[0].length < major) {
            split[0] = '0' + split[0];
        }
        if (split[0].length > major) {
            log(chalk_1.default.red('Major length exceeded'), 'Number:', num, 'Section:', split[0], 'Length:', split[0].length, 'Target:', major);
        }
        str = split.join('.');
    }
    if (minor !== undefined) {
        if (split[1] === undefined) {
            split[1] = '0';
        }
        while (split[1].length < minor) {
            split[1] = split[1] + '0';
        }
        if (split[1].length > minor) {
            log(chalk_1.default.red('Minor length exceeded'), 'Number:', num, 'Section:', split[1], 'Length:', split[1].length, 'Target:', minor);
        }
        str = split.join('.');
    }
    return str;
}
exports.numberToString = numberToString;
function flattenObject(data) {
    if (!data || typeof data !== 'object' || Array.isArray(data)) {
        return data;
    }
    let subData = { ...data };
    let loop = true;
    while (loop) {
        loop = false;
        const entries = Object.entries(subData);
        for (const entry of entries) {
            const key = entry[0];
            const value = entry[1];
            if (typeof value === 'object' && !Array.isArray(value)) {
                delete subData[key];
                const valueWithKeynames = {};
                Object.entries(value).forEach((subEntry) => {
                    valueWithKeynames[`${key}.${subEntry[0]}`] = subEntry[1];
                });
                subData = { ...subData, ...valueWithKeynames };
                loop = true;
            }
        }
    }
    return subData;
}
exports.flattenObject = flattenObject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzREFBaUQ7QUFDakQsa0RBQTBCO0FBRTFCLE1BQU0sR0FBRyxHQUE0Qix1QkFBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRTFELFNBQWdCLElBQUksQ0FBVyxFQUFVLEVBQUUsRUFBMkI7SUFDcEUsR0FBRyxDQUFDLGVBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQTJDLEVBQUUsTUFBOEIsRUFBUSxFQUFFO1FBQ3ZHLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNwQixJQUFJO2dCQUNGLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM3QjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNYO1FBQ0gsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBWEQsb0JBV0M7QUFFRCxTQUFnQixjQUFjLENBQUMsR0FBVyxFQUFFLEtBQWMsRUFBRSxLQUFjO0lBQ3hFLElBQUksR0FBRyxHQUFXLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNqQyxNQUFNLEtBQUssR0FBYSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUN2QixJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDMUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztTQUNoQjtRQUNELE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1B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QixFQUFFLENBQUM7Z0JBQy9DLElBQUksR0FBRyxJQUFJLENBQUM7YUFDYjtTQUNGO0tBQ0Y7SUFDRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBeEJELHNDQXdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUxvZyB9IGZyb20gJ0BoZWxwZXJzL2xvZy1oZWxwZXJzJztcclxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcclxuXHJcbmNvbnN0IGxvZzogKC4uLm1zZzogYW55W10pID0+IHZvaWQgPSBjcmVhdGVMb2coJ0hlbHBlcnMnKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3YWl0PFQgPSB2b2lkPihtczogbnVtYmVyLCBmbj86ICgpID0+IChUIHwgUHJvbWlzZTxUPikpOiBQcm9taXNlPFQ+IHtcclxuICBsb2coY2hhbGsuZ3JlZW4oJ1dhaXQnKSwgbXMpO1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogKHZhbHVlPzogKFByb21pc2U8VD4gfCBUKSkgPT4gdm9pZCwgcmVqZWN0OiAocmVhc29uPzogYW55KSA9PiB2b2lkKTogdm9pZCA9PiB7XHJcbiAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXNvbHZlKGZuICYmIChhd2FpdCBmbigpKSk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgIH1cclxuICAgIH0sIG1zKTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlclRvU3RyaW5nKG51bTogbnVtYmVyLCBtYWpvcj86IG51bWJlciwgbWlub3I/OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gIGxldCBzdHI6IHN0cmluZyA9IG51bS50b1N0cmluZygpO1xyXG4gIGNvbnN0IHNwbGl0OiBzdHJpbmdbXSA9IHN0ci5zcGxpdCgnLicpO1xyXG4gIGlmIChtYWpvciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAoc3BsaXRbMF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBzcGxpdFswXSA9ICcwJztcclxuICAgIH1cclxuICAgIHdoaWxlIChzcGxpdFswXS5sZW5ndGggPCBtYWpvcikge1xyXG4gICAgICBzcGxpdFswXSA9ICcwJyArIHNwbGl0WzBdO1xyXG4gICAgfVxyXG4gICAgaWYgKHNwbGl0WzBdLmxlbmd0aCA+IG1ham9yKSB7XHJcbiAgICAgIGxvZyhjaGFsay5yZWQoJ01ham9yIGxlbmd0aCBleGNlZWRlZCcpLCAnTnVtYmVyOicsIG51bSwgJ1NlY3Rpb246Jywgc3BsaXRbMF0sICdMZW5ndGg6Jywgc3BsaXRbMF0ubGVuZ3RoLCAnVGFyZ2V0OicsIG1ham9yKTtcclxuICAgIH1cclxuICAgIHN0ciA9IHNwbGl0LmpvaW4oJy4nKTtcclxuICB9XHJcbiAgaWYgKG1pbm9yICE9PSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChzcGxpdFsxXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHNwbGl0WzFdID0gJzAnO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKHNwbGl0WzFdLmxlbmd0aCA8IG1pbm9yKSB7XHJcbiAgICAgIHNwbGl0WzFdID0gc3BsaXRbMV0gKyAnMCc7XHJcbiAgICB9XHJcbiAgICBpZiAoc3BsaXRbMV0ubGVuZ3RoID4gbWlub3IpIHtcclxuICAgICAgbG9nKGNoYWxrLnJlZCgnTWlub3IgbGVuZ3RoIGV4Y2VlZGVkJyksICdOdW1iZXI6JywgbnVtLCAnU2VjdGlvbjonLCBzcGxpdFsxXSwgJ0xlbmd0aDonLCBzcGxpdFsxXS5sZW5ndGgsICdUYXJnZXQ6JywgbWlub3IpO1xyXG4gICAgfVxyXG4gICAgc3RyID0gc3BsaXQuam9pbignLicpO1xyXG4gIH1cclxuICByZXR1cm4gc3RyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbk9iamVjdChkYXRhOiBhbnkpOiBhbnkge1xyXG4gIGlmICghZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG4gIGxldCBzdWJEYXRhOiBhbnkgPSB7IC4uLmRhdGEgfTtcclxuICBsZXQgbG9vcDogYm9vbGVhbiA9IHRydWU7XHJcbiAgd2hpbGUgKGxvb3ApIHtcclxuICAgIGxvb3AgPSBmYWxzZTtcclxuICAgIGNvbnN0IGVudHJpZXM6IEFycmF5PFtzdHJpbmcsIGFueV0+ID0gT2JqZWN0LmVudHJpZXMoc3ViRGF0YSk7XHJcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcclxuICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBlbnRyeVswXTtcclxuICAgICAgY29uc3QgdmFsdWU6IGFueSA9IGVudHJ5WzFdO1xyXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBkZWxldGUgc3ViRGF0YVtrZXldO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlV2l0aEtleW5hbWVzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XHJcbiAgICAgICAgT2JqZWN0LmVudHJpZXModmFsdWUpLmZvckVhY2goKHN1YkVudHJ5OiBbc3RyaW5nLCBhbnldKSA9PiB7XHJcbiAgICAgICAgICB2YWx1ZVdpdGhLZXluYW1lc1tgJHtrZXl9LiR7c3ViRW50cnlbMF19YF0gPSBzdWJFbnRyeVsxXTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzdWJEYXRhID0geyAuLi5zdWJEYXRhLCAuLi52YWx1ZVdpdGhLZXluYW1lcyB9O1xyXG4gICAgICAgIGxvb3AgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBzdWJEYXRhO1xyXG59XHJcbiJdfQ==