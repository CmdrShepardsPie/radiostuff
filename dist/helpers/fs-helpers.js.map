{"version":3,"file":"fs-helpers.js","sourceRoot":"","sources":["../../src/helpers/fs-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { fillArrayObjects, stringifyAsync } from '@helpers/csv-helpers';\nimport { flattenObject } from '@helpers/helpers';\nimport { createLog } from '@helpers/log-helpers';\nimport chalk from 'chalk';\nimport fs, { Stats } from 'fs';\nimport path from 'path';\nimport { promisify } from 'util';\n\nconst log: (...msg: any[]) => void = createLog('FS Helpers');\n\nexport const existsAsync: (path: string) => Promise<boolean> = promisify(fs.exists);\nexport const mkdirAsync: (path: string) => Promise<void> = promisify(fs.mkdir);\nexport const readFileAsync: (path: string | number) => Promise<Buffer> = promisify(fs.readFile);\nexport const readdirAsync: (path: string) => Promise<string[]> = promisify(fs.readdir);\nexport const writeFileAsync: (path: string | number, data: any) => Promise<void> = promisify(fs.writeFile);\nexport const statAsync: (arg1: string) => Promise<Stats> = promisify(fs.stat);\n\nexport async function makeDirs(filePath: string): Promise<void> {\n  log(chalk.green('Make Dirs'), filePath);\n\n  let tempPath: string = `.`;\n  for (const dir of filePath.split(/[/\\\\]/)) {\n    if (/\\./.test(dir)) {\n      break;\n    }\n    tempPath = path.join(tempPath, dir);\n    if (!(await existsAsync(tempPath))) {\n      // log(chalk.blue(\"make\"), tempPath);\n      try {\n        await mkdirAsync(tempPath);\n      } catch (e) {\n        log(chalk.red(e));\n      }\n    }\n  }\n}\n\nexport async function dirExists(filePath: string): Promise<boolean> {\n  // log(chalk.green(\"Dir Exists\"), filePath);\n\n  let tempPath: string = `.`;\n  let exists: boolean = true;\n  for (const dir of filePath.split(/[/\\\\]/)) {\n    tempPath = path.join(tempPath, dir);\n    exists = await existsAsync(tempPath);\n    if (!exists) {\n      break;\n    }\n  }\n  return exists;\n}\n\nexport async function writeToJsonAndCsv(filename: string, jsonData: any[], csvData: any[] = jsonData, header: boolean = true): Promise<void> {\n  // log(chalk.green(\"Write to Json and CSV\"), filename);\n\n  const jsonString: string = JSON.stringify(jsonData, null, 2);\n  const jsonName: string = `${filename}.json`;\n  await makeDirs(jsonName);\n  await writeFileAsync(jsonName, jsonString);\n\n  const csvPrep: object[] = Array.isArray(csvData) ?\n    fillArrayObjects(csvData.map((r: any) => flattenObject(r))) :\n    [flattenObject(csvData)];\n  const csvString: string = await stringifyAsync(csvPrep, { header });\n  const csvName: string = `${filename}.csv`;\n  await writeFileAsync(csvName, csvString);\n}\n\nexport function splitExtension(filename: string): { ext: string; name: string } {\n  log(chalk.green('Split Extension'), filename);\n\n  const name: string = filename.substring(0, filename.lastIndexOf('.'));\n  const ext: string = filename.substring(filename.lastIndexOf('.') + 1);\n  return { name, ext };\n}\n\nexport async function getAllFilesFromDirectory<T>(directory: string): Promise<T[]> {\n  log(chalk.green('Get All Files from Directory'), directory);\n\n  const files: any[] = [];\n  const fileNames: string[] = await readdirAsync(directory);\n  const extMatch: RegExp = /\\.json$/i;\n  for (const fileName of fileNames) {\n    const file: string = path.join(directory, fileName);\n    const stat: Stats = await statAsync(file);\n    if (stat.isFile() && file.match(extMatch)) {\n      // log(\"Get All Files From Directory\", chalk.green(\"reading\"), file);\n      const data: Buffer = await readFileAsync(file);\n      files.push(JSON.parse(data.toString()));\n    } else {\n      // log(\"Get All Files From Directory\", chalk.red(\"skipped\"), file);\n    }\n  }\n  return files;\n}\n"]}