{"version":3,"file":"log-helpers.js","sourceRoot":"","sources":["../../src/helpers/log-helpers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;IAAA,kDAAqC;IAErC,IAAI,iBAAiB,GAAY,KAAK,CAAC;IACvC,IAAI,WAAmB,CAAC;IAExB,MAAM,QAAQ,GAAuB;QACnC,aAAa;QACb,OAAO;QACP,SAAS;QACT,UAAU;QACV,QAAQ;QACR,WAAW;QACX,QAAQ;KAUT,CAAC;IACF,IAAI,SAAS,GAAW,CAAC,CAAC;IAE1B,SAAgB,SAAS,CAAC,OAAe,EAAE,KAAmB;QAC5D,IAAI,CAAC,KAAK,EAAE;YACV,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC5B,SAAS,IAAI,CAAC,CAAC;YACf,IAAI,SAAS,IAAI,QAAQ,CAAC,MAAM,EAAE;gBAChC,SAAS,GAAG,CAAC,CAAC;aACf;SACF;QACD,OAAO,EAAE,GAAG,EAAE,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,KAAK,EAAE,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC;IAChF,CAAC;IATD,8BASC;IAED,SAAgB,SAAS,CAAC,OAAe,EAAE,KAAmB;QAC5D,IAAI,CAAC,KAAK,EAAE;YACV,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC5B,SAAS,IAAI,CAAC,CAAC;YACf,IAAI,SAAS,IAAI,QAAQ,CAAC,MAAM,EAAE;gBAChC,SAAS,GAAG,CAAC,CAAC;aACf;SACF;QACD,aAAa;QACb,MAAM,YAAY,GAAU,eAAK,CAAC,KAAK,CAAC,CAAC;QAEzC,OAAO,CAAC,GAAG,GAAU,EAAQ,EAAE;YAC7B,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAE1B,iCAAiC;YACjC,uBAAuB;YACvB,IAAI;YACJ,IAAI,iBAAiB,EAAE;gBACrB,eAAe,EAAE,CAAC;aACnB;YAED,MAAM,IAAI,GAAU,CAAC,YAAY,CAAC,GAAG,OAAO,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;YAE1D,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;YACrB,iBAAiB,GAAG,KAAK,CAAC;YAC1B,WAAW,GAAG,OAAO,CAAC;QACxB,CAAC,CAAC;IACJ,CAAC;IA3BD,8BA2BC;IAED,SAAgB,WAAW,CAAC,OAAe,EAAE,KAAmB;QAC9D,IAAI,CAAC,KAAK,EAAE;YACV,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC5B,SAAS,IAAI,CAAC,CAAC;YACf,IAAI,SAAS,IAAI,QAAQ,CAAC,MAAM,EAAE;gBAChC,SAAS,GAAG,CAAC,CAAC;aACf;SACF;QACD,aAAa;QACb,MAAM,YAAY,GAAU,eAAK,CAAC,KAAK,CAAC,CAAC;QAEzC,OAAO,CAAC,GAAG,GAAU,EAAQ,EAAE;YAC7B,IAAI,CAAC,iBAAiB,EAAE;gBACtB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;aACzD;YACD,IAAI,iBAAiB,IAAI,WAAW,KAAK,OAAO,EAAE;gBAChD,eAAe,EAAE,CAAC;gBAClB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;aACzD;YACD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACpC,iBAAiB,GAAG,IAAI,CAAC;YACzB,WAAW,GAAG,OAAO,CAAC;QACxB,CAAC,CAAC;IACJ,CAAC;IAvBD,kCAuBC;IAED,SAAgB,gBAAgB,CAAC,OAAe;QAC9C,MAAM,KAAK,GAAgB,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC/C,SAAS,IAAI,CAAC,CAAC;QACf,IAAI,SAAS,IAAI,QAAQ,CAAC,MAAM,EAAE;YAChC,SAAS,GAAG,CAAC,CAAC;SACf;QACD,aAAa;QACb,MAAM,YAAY,GAAU,eAAK,CAAC,KAAK,CAAC,CAAC;QAEzC,OAAO,CAAC,IAAY,EAAE,GAAG,GAAU,EAAQ,EAAE;YAC3C,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,OAAO,GAAG,CAAC,EAAE,eAAK,CAAC,GAAG,CAAC,GAAG,IAAI,SAAS,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;YAC9E,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC;IACJ,CAAC;IAbD,4CAaC;IAED,SAAS,UAAU,CAAC,CAAM;QACxB,IAAI,CAAC,YAAY,KAAK,EAAE;YACtB,OAAO,CAAC,CAAC;SACV;QACD,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YACzB,IAAI;gBACF,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aACnB;YAAC,OAAO,CAAC,EAAE;gBACV,cAAc;aACf;SACF;QACD,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YACzB,IAAI;gBACF,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC/B,CAAC,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;aAC3B;YAAC,OAAO,CAAC,EAAE;gBACV,cAAc;aACf;SACF;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IAED,SAAS,kBAAkB,CAAC,IAAY;QACtC,UAAU;QACV,IAAI,GAAG,IAAI,CAAC,OAAO,CACjB,4BAA4B,EAC5B,KAAK,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAC5B,CAAC;QACF,0BAA0B;QAC1B,IAAI,GAAG,IAAI,CAAC,OAAO,CACjB,6CAA6C,EAC7C,KAAK,eAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAC1B,CAAC;QACF,OAAO;QACP,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,GAAG,eAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC;IACd,CAAC;IAED,SAAS,eAAe;QACtB,OAAO,CAAC,GAAG,EAAE,CAAC;IAChB,CAAC","sourcesContent":["import chalk, { Chalk } from 'chalk';\n\nlet lastMessageInline: boolean = false;\nlet lastContext: string;\n\nconst bgColors: Array<keyof Chalk> = [\n  // \"bgBlack\",\n  'bgRed',\n  'bgGreen',\n  'bgYellow',\n  'bgBlue',\n  'bgMagenta',\n  'bgCyan',\n  // \"bgWhite\",\n  // \"bgBlackBright\",\n  // \"bgRedBright\",\n  // \"bgGreenBright\",\n  // \"bgYellowBright\",\n  // \"bgBlueBright\",\n  // \"bgMagentaBright\",\n  // \"bgCyanBright\",\n  // \"bgWhiteBright\",\n];\nlet lastColor: number = 0;\n\nexport function createOut(context: string, color?: keyof Chalk): { log: (...msg: any[]) => void; write: (...msg: any[]) => void } {\n  if (!color) {\n    color = bgColors[lastColor];\n    lastColor += 1;\n    if (lastColor >= bgColors.length) {\n      lastColor = 0;\n    }\n  }\n  return { log: createLog(context, color), write: createWrite(context, color) };\n}\n\nexport function createLog(context: string, color?: keyof Chalk): (...msg: any[]) => void {\n  if (!color) {\n    color = bgColors[lastColor];\n    lastColor += 1;\n    if (lastColor >= bgColors.length) {\n      lastColor = 0;\n    }\n  }\n  // @ts-ignore\n  const chalkColorFn: Chalk = chalk[color];\n\n  return (...msg: any[]): void => {\n    msg = msg.map(prepIfJson);\n\n    // if (lastContext !== context) {\n    //   createEmptyLine();\n    // }\n    if (lastMessageInline) {\n      createEmptyLine();\n    }\n\n    const args: any[] = [chalkColorFn(`${context}:`), ...msg];\n\n    console.log(...args);\n    lastMessageInline = false;\n    lastContext = context;\n  };\n}\n\nexport function createWrite(context: string, color?: keyof Chalk): (...msg: any[]) => void {\n  if (!color) {\n    color = bgColors[lastColor];\n    lastColor += 1;\n    if (lastColor >= bgColors.length) {\n      lastColor = 0;\n    }\n  }\n  // @ts-ignore\n  const chalkColorFn: Chalk = chalk[color];\n\n  return (...msg: any[]): void => {\n    if (!lastMessageInline) {\n      process.stdout.write(chalkColorFn(`${context}:`) + ' ');\n    }\n    if (lastMessageInline && lastContext !== context) {\n      createEmptyLine();\n      process.stdout.write(chalkColorFn(`${context}:`) + ' ');\n    }\n    process.stdout.write(msg.join(' '));\n    lastMessageInline = true;\n    lastContext = context;\n  };\n}\n\nexport function createThrowError(context: string): (type: string, ...msg: any[]) => void {\n  const color: keyof Chalk = bgColors[lastColor];\n  lastColor += 1;\n  if (lastColor >= bgColors.length) {\n    lastColor = 0;\n  }\n  // @ts-ignore\n  const chalkColorFn: Chalk = chalk[color];\n\n  return (type: string, ...msg: any[]): void => {\n    console.log(chalkColorFn(`${context}:`), chalk.red(`${type} Error:`), ...msg);\n    process.exit(1);\n  };\n}\n\nfunction prepIfJson(t: any): Error | string {\n  if (t instanceof Error) {\n    return t;\n  }\n  if (typeof t === 'string') {\n    try {\n      t = JSON.parse(t);\n    } catch (e) {\n      /* no empty */\n    }\n  }\n  if (typeof t === 'object') {\n    try {\n      t = JSON.stringify(t, null, 4);\n      t = colorizeJsonString(t);\n    } catch (e) {\n      /* no empty */\n    }\n  }\n  return t;\n}\n\nfunction colorizeJsonString(json: string): string {\n  // Strings\n  json = json.replace(\n    /(\\s+)(\"[^\"]*\")(,?[\\r\\n])/gi,\n    `$1${chalk.yellow('$2')}$3`,\n  );\n  // booleans, numbers, etc.\n  json = json.replace(\n    /(\\s+)([^\"[{\\]}][^[\\]{}\"\\n\\r,]*)(,?[\\r\\n])/gi,\n    `$1${chalk.cyan('$2')}$3`,\n  );\n  // Keys\n  json = json.replace(/(\"[^\"]*\"):/gi, `${chalk.magenta('$1')}:`);\n  return json;\n}\n\nfunction createEmptyLine(): void {\n  console.log();\n}\n"]}