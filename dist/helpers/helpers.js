"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log_helpers_1 = require("@helpers/log-helpers");
const chalk_1 = require("chalk");
const log = log_helpers_1.createLog("Helpers");
function wait(ms, fn) {
    log(chalk_1.default.green("Wait"), ms);
    return new Promise((resolve, reject) => {
        setTimeout(async () => {
            try {
                resolve(fn && (await fn()));
            }
            catch (e) {
                reject(e);
            }
        }, ms);
    });
}
exports.wait = wait;
function numberToString(num, major, minor) {
    let str = num.toString();
    const split = str.split(".");
    if (major !== undefined) {
        if (split[0] === undefined) {
            split[0] = "0";
        }
        while (split[0].length < major) {
            split[0] = "0" + split[0];
        }
        if (split[0].length > major) {
            log(chalk_1.default.red("Major length exceeded"), "Number:", num, "Section:", split[0], "Length:", split[0].length, "Target:", major);
        }
        str = split.join(".");
    }
    if (minor !== undefined) {
        if (split[1] === undefined) {
            split[1] = "0";
        }
        while (split[1].length < minor) {
            split[1] = split[1] + "0";
        }
        if (split[1].length > minor) {
            log(chalk_1.default.red("Minor length exceeded"), "Number:", num, "Section:", split[1], "Length:", split[1].length, "Target:", minor);
        }
        str = split.join(".");
    }
    return str;
}
exports.numberToString = numberToString;
function flattenObject(data) {
    if (!data || typeof data !== "object" || Array.isArray(data)) {
        return data;
    }
    let subData = { ...data };
    let loop = true;
    while (loop) {
        loop = false;
        const entries = Object.entries(subData);
        for (const entry of entries) {
            const key = entry[0];
            const value = entry[1];
            if (typeof value === "object" && !Array.isArray(value)) {
                delete subData[key];
                const valueWithKeynames = {};
                Object.entries(value).forEach((subEntry) => {
                    valueWithKeynames[`${key}.${subEntry[0]}`] = subEntry[1];
                });
                subData = { ...subData, ...valueWithKeynames };
                loop = true;
            }
        }
    }
    return subData;
}
exports.flattenObject = flattenObject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzREFBK0M7QUFDL0MsaUNBQTBCO0FBRzFCLE1BQU0sR0FBRyxHQUFHLHVCQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFakMsU0FBZ0IsSUFBSSxDQUFDLEVBQVUsRUFBRSxFQUFRO0lBQ3ZDLEdBQUcsQ0FBQyxlQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ3BCLElBQUk7Z0JBQ0YsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzdCO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ1g7UUFDSCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFYRCxvQkFXQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxHQUFXLEVBQUUsS0FBYyxFQUFFLEtBQWM7SUFDeEUsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQ3ZCLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUMxQixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFH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QUM7Z0JBQzdDLElBQUksR0FBRyxJQUFJLENBQUM7YUFDYjtTQUNGO0tBQ0Y7SUFDRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBeEJELHNDQXdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlTG9nfSBmcm9tIFwiQGhlbHBlcnMvbG9nLWhlbHBlcnNcIjtcbmltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIjtcbmltcG9ydCAqIGFzIHN0cmVhbSBmcm9tIFwic3RyZWFtXCI7XG5cbmNvbnN0IGxvZyA9IGNyZWF0ZUxvZyhcIkhlbHBlcnNcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiB3YWl0KG1zOiBudW1iZXIsIGZuPzogYW55KSB7XG4gIGxvZyhjaGFsay5ncmVlbihcIldhaXRcIiksIG1zKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc29sdmUoZm4gJiYgKGF3YWl0IGZuKCkpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH0sIG1zKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJUb1N0cmluZyhudW06IG51bWJlciwgbWFqb3I/OiBudW1iZXIsIG1pbm9yPzogbnVtYmVyKSB7XG4gIGxldCBzdHIgPSBudW0udG9TdHJpbmcoKTtcbiAgY29uc3Qgc3BsaXQgPSBzdHIuc3BsaXQoXCIuXCIpO1xuICBpZiAobWFqb3IgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChzcGxpdFswXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzcGxpdFswXSA9IFwiMFwiO1xuICAgIH1cbiAgICB3aGlsZSAoc3BsaXRbMF0ubGVuZ3RoIDwgbWFqb3IpIHtcbiAgICAgIHNwbGl0WzBdID0gXCIwXCIgKyBzcGxpdFswXTtcbiAgICB9XG4gICAgaWYgKHNwbGl0WzBdLmxlbmd0aCA+IG1ham9yKSB7XG4gICAgICBsb2coY2hhbGsucmVkKFwiTWFqb3IgbGVuZ3RoIGV4Y2VlZGVkXCIpLCBcIk51bWJlcjpcIiwgbnVtLCBcIlNlY3Rpb246XCIsIHNwbGl0WzBdLCBcIkxlbmd0aDpcIiwgc3BsaXRbMF0ubGVuZ3RoLCBcIlRhcmdldDpcIiwgbWFqb3IpO1xuICAgIH1cbiAgICBzdHIgPSBzcGxpdC5qb2luKFwiLlwiKTtcbiAgfVxuICBpZiAobWlub3IgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChzcGxpdFsxXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzcGxpdFsxXSA9IFwiMFwiO1xuICAgIH1cbiAgICB3aGlsZSAoc3BsaXRbMV0ubGVuZ3RoIDwgbWlub3IpIHtcbiAgICAgIHNwbGl0WzFdID0gc3BsaXRbMV0gKyBcIjBcIjtcbiAgICB9XG4gICAgaWYgKHNwbGl0WzFdLmxlbmd0aCA+IG1pbm9yKSB7XG4gICAgICBsb2coY2hhbGsucmVkKFwiTWlub3IgbGVuZ3RoIGV4Y2VlZGVkXCIpLCBcIk51bWJlcjpcIiwgbnVtLCBcIlNlY3Rpb246XCIsIHNwbGl0WzFdLCBcIkxlbmd0aDpcIiwgc3BsaXRbMV0ubGVuZ3RoLCBcIlRhcmdldDpcIiwgbWlub3IpO1xuICAgIH1cbiAgICBzdHIgPSBzcGxpdC5qb2luKFwiLlwiKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbk9iamVjdChkYXRhOiBvYmplY3QpIHtcbiAgaWYgKCFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcIm9iamVjdFwiIHx8IEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBsZXQgc3ViRGF0YSA9IHsuLi5kYXRhfTtcbiAgbGV0IGxvb3AgPSB0cnVlO1xuICB3aGlsZSAobG9vcCkge1xuICAgIGxvb3AgPSBmYWxzZTtcbiAgICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoc3ViRGF0YSk7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICBjb25zdCBrZXkgPSBlbnRyeVswXSBhcyBrZXlvZiB0eXBlb2Ygc3ViRGF0YTtcbiAgICAgIGNvbnN0IHZhbHVlID0gZW50cnlbMV07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBkZWxldGUgc3ViRGF0YVtrZXldO1xuICAgICAgICBjb25zdCB2YWx1ZVdpdGhLZXluYW1lczogYW55ID0ge307XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHZhbHVlKS5mb3JFYWNoKChzdWJFbnRyeSkgPT4ge1xuICAgICAgICAgIHZhbHVlV2l0aEtleW5hbWVzW2Ake2tleX0uJHtzdWJFbnRyeVswXX1gXSA9IHN1YkVudHJ5WzFdO1xuICAgICAgICB9KTtcbiAgICAgICAgc3ViRGF0YSA9IHsuLi5zdWJEYXRhLCAuLi52YWx1ZVdpdGhLZXluYW1lc307XG4gICAgICAgIGxvb3AgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3ViRGF0YTtcbn1cbiJdfQ==