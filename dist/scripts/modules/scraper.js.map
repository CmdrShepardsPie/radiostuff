{"version":3,"file":"scraper.js","sourceRoot":"","sources":["../../../src/scripts/modules/scraper.ts"],"names":[],"mappings":"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","sourcesContent":["import { dirExists, makeDirs, readFileAsync, writeFileAsync } from '@helpers/fs-helpers';\nimport { wait } from '@helpers/helpers';\nimport { createOut } from '@helpers/log-helpers';\nimport { IRepeaterRaw } from '@interfaces/i-repeater-raw';\nimport Axios, { AxiosResponse } from 'axios';\nimport chalk from 'chalk';\nimport { JSDOM } from 'jsdom';\nimport { getNumber, getText, getTextOrNumber } from './helper';\n\nconst { log, write }: { log: (...msg: any[]) => void; write: (...msg: any[]) => void } = createOut('Scraper');\n// const write = createWrite(\"Scraper\");\n\nexport default class Scraper {\n  private data: IRepeaterRaw[] = [];\n  private readonly url: string;\n\n  constructor(private location: string | number, private distance: number) {\n    log(chalk.green('New Scraper'), location, distance);\n    this.url = `https://www.repeaterbook.com/repeaters/prox_result.php?city=${encodeURIComponent(location.toString())}&distance=${distance}&Dunit=m&band1=%25&band2=&freq=&call=&features=&status_id=%25&use=%25&order=%60state_id%60%2C+%60loc%60%2C+%60call%60+ASC`;\n  }\n\n  public async process(): Promise<IRepeaterRaw[]> {\n    log(chalk.green('Process'));\n\n    const parts: string[] = this.location.toString().split(`,`);\n    const baseKey: string = `${(parts[1] || '.').trim()}/${parts[0].trim()}.html`;\n    const page: string = await this.getUrl(this.url, baseKey);\n    const dom: JSDOM = new JSDOM(page);\n    await this.getRepeaterList(dom.window.document);\n    return this.data;\n  }\n\n  private async getRepeaterList(document: Document): Promise<void> {\n    log(chalk.green('Get Repeater List'));\n\n    const table: HTMLTableElement | null = document.querySelector('table.w3-table.w3-striped.w3-responsive');\n    if (table) {\n      const rows: HTMLTableRowElement[] = [...table.querySelectorAll<HTMLTableRowElement>('tbody > tr')];\n      const headerRow: any | undefined = rows.shift();\n      if (headerRow) {\n        const headerCells: HTMLTableHeaderCellElement[] = [...headerRow.querySelectorAll('th')];\n        const headers: string[] = headerCells.map((th: HTMLTableHeaderCellElement) => getText(th));\n        for (const row of rows) {\n          const data: { [ key: string ]: string | number | undefined } = {};\n          const cells: HTMLTableDataCellElement[] = [...row.querySelectorAll('td')];\n          cells.forEach((td: HTMLTableDataCellElement, index: number) => data[headers[index]] = getTextOrNumber(td));\n          const link: HTMLAnchorElement | null = cells[0].querySelector('a');\n          if (link) {\n            write('^');\n            Object.assign(data, await this.getRepeaterDetails(link.href));\n            write('_');\n          }\n          this.data.push(data as any as IRepeaterRaw);\n        }\n      }\n    }\n  }\n\n  private async getRepeaterDetails(href: string): Promise<IRepeaterRaw> {\n    const urlParams: string = href.split('?')[1];\n    const keyParts: RegExpMatchArray = urlParams.match(/state_id=(\\d+)&ID=(\\d+)/) || [];\n    const key: string = `${keyParts[1]}/${keyParts[2]}.html`;\n    const page: string = await this.getUrl(`https://www.repeaterbook.com/repeaters/${href}`, key);\n    const dom: JSDOM = new JSDOM(page);\n    const data: { [ key: string ]: string | number | undefined } = {};\n    data.state_id = keyParts[1];\n    data.ID = keyParts[2];\n    const menus: HTMLAnchorElement[] = [...dom.window.document.querySelectorAll<HTMLAnchorElement>('#cssmenu a')];\n    const locationRegex: RegExp = /(-?\\d*\\.?\\d*)\\+(-?\\d*\\.?\\d*)/i;\n    for (const menu of menus) {\n      const locationMatch: RegExpMatchArray | null = menu.href.match(locationRegex);\n      if (locationMatch) {\n        const lat: number = getNumber(locationMatch[1]);\n        const long: number = getNumber(locationMatch[2]);\n        if (!isNaN(lat)) {\n          data.Latitude = lat;\n        }\n        if (!isNaN(long)) {\n          data.Longitude = long;\n        }\n        break;\n      }\n    }\n    const table: Element | null = dom.window.document.querySelector('table.w3-table.w3-responsive');\n    if (table) {\n      const rows: HTMLTableRowElement[] = [...table.querySelectorAll<HTMLTableRowElement>('tbody > tr')];\n      for (const row of rows) {\n        const cells: HTMLTableDataCellElement[] = [...row.querySelectorAll('td')];\n        const title: string = getText(cells[0]);\n        const value: number | string = getTextOrNumber(cells[1]);\n        const dataKey: string = title.split(':')[0].trim();\n        const dataVal: string = title.split(':')[1];\n        let updated: number | string | undefined;\n        if (dataVal) {\n          const date: RegExpMatchArray | null = dataVal.match(/(\\d{4}-\\d{2}-\\d{2})/);\n          if (date && date[1]) {\n            updated = date[1];\n          }\n        }\n        data[dataKey] = updated || value;\n      }\n    }\n    return data as any as IRepeaterRaw;\n  }\n\n  private async getCache(key: string): Promise<string | undefined> {\n    const file: string = `data/repeaters/_cache/${key}`;\n    if (await dirExists(file)) {\n      return (await readFileAsync(file)).toString();\n    }\n  }\n\n  private async setCache(key: string, value: string): Promise<void> {\n    const file: string = `data/repeaters/_cache/${key}`;\n    await makeDirs(file);\n    return writeFileAsync(file, value);\n  }\n\n  private async getUrl(url: string, cacheKey?: string): Promise<string> {\n    // log(chalk.green(\"Get URL\"), url, cacheKey);\n\n    const cache: string | undefined = await this.getCache(cacheKey || url);\n    if (cache) {\n      // log(chalk.yellow(\"Cached\"), url, cacheKey);\n      write('<');\n      return cache;\n    } else {\n      // Slow down the requests a little bit so we're not hammering the server or triggering any anti-bot or DDoS protections\n      const waitTime: number = (5000 + (Math.random() * 10000));\n\n      await wait(waitTime);\n      // log(chalk.yellow(\"Get\"), url);\n      const request: AxiosResponse<string> = await Axios.get(url);\n      // log(chalk.green(\"Got\"), url);\n      write('>');\n\n      const data: string = request.data;\n      await this.setCache(cacheKey || url, data);\n      return data;\n    }\n  }\n}\n"]}