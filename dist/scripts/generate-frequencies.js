(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "module-alias/register", "@helpers/fs-helpers", "@helpers/log-helpers"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require("module-alias/register");
    const fs_helpers_1 = require("@helpers/fs-helpers");
    const log_helpers_1 = require("@helpers/log-helpers");
    const log = log_helpers_1.createLog('Generate Frequencies');
    let frequencies = [];
    const range2m = [
        // Channels
        { start: 146.4, end: 146.595, steps: [0.015], name: `FM Voice` },
        { start: 147.42, end: 147.585, steps: [0.015], name: `FM Voice` },
        // Range
        { start: 144.9, end: 145.1, steps: [0.015], name: `Weak Signal, FM, Digital/Packet` },
        { start: 145.5, end: 145.8, steps: [0.015], name: `Miscellaneous and Experimental Modes` },
    ];
    const range125m = [
        // Channels
        { start: 223.4, end: 223.52, steps: [0.020], name: `FM Voice` },
        { start: 222.16, end: 222.24, steps: [0.020], name: `Mixed Mode` },
        { start: 223.72, end: 223.84, steps: [0.020], name: `Mixed Mode` },
        // Range
        { start: 223.53, end: 223.63, steps: [0.020], name: `Digital/Packet` },
    ];
    const range70cm = [
        // Channels
        { start: 440.7, end: 441.3, steps: [0.025], name: `Mixed Mode` },
        { start: 445.7, end: 446.275, steps: [0.025], name: `FM Voice` },
        { start: 446.2, end: 446.3, steps: [0.0125], name: `Digital Voice Narrowband` },
        // Range
        { start: 434.5, end: 435, steps: [0.025], name: `Mixed Mode Digital and Voice` },
        { start: 439.5, end: 440, steps: [0.025], name: `Mixed Mode Digital and Voice` },
    ];
    [...range2m, ...range125m, ...range70cm].forEach((range) => {
        range.steps.forEach((step) => {
            for (let i = range.start; i <= range.end; i += step) {
                i = Math.round(i * 100000) / 100000;
                if (!frequencies.find((f) => f.Frequency === i)) {
                    frequencies.push({ Frequency: i, Name: range.name });
                }
            }
        });
    });
    frequencies = frequencies.sort((a, b) => (a.Frequency || 0) - (b.Frequency || 0));
    log(frequencies, frequencies.length);
    fs_helpers_1.writeFileAsync(`./data/frequencies.json`, JSON.stringify(frequencies, null, 2))
        .then((r) => log(`Done`, r));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtZnJlcXVlbmNpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9nZW5lcmF0ZS1mcmVxdWVuY2llcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUFBLGlDQUErQjtJQUUvQixvREFBcUQ7SUFDckQsc0RBQWlEO0lBSWpELE1BQU0sR0FBRyxHQUE0Qix1QkFBUyxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDdkUsSUFBSSxXQUFXLEdBQW1CLEVBQUUsQ0FBQztJQUNyQyxNQUFNLE9BQU8sR0FBMkI7UUFDdEMsV0FBVztRQUNYLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7UUFDaEUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtRQUVqRSxRQUFRO1FBQ1IsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLGlDQUFpQyxFQUFFO1FBQ3JGLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxzQ0FBc0MsRUFBRTtLQUMzRixDQUFDO0lBRUYsTUFBTSxTQUFTLEdBQTJCO1FBQ3hDLFdBQVc7UUFDWCxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO1FBQy9ELEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFH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ImltcG9ydCAnbW9kdWxlLWFsaWFzL3JlZ2lzdGVyJztcblxuaW1wb3J0IHsgd3JpdGVGaWxlQXN5bmMgfSBmcm9tICdAaGVscGVycy9mcy1oZWxwZXJzJztcbmltcG9ydCB7IGNyZWF0ZUxvZyB9IGZyb20gJ0BoZWxwZXJzL2xvZy1oZWxwZXJzJztcbmltcG9ydCB7IElGcmVxdWVuY3lEZWZpbml0aW9uIH0gZnJvbSAnQGludGVyZmFjZXMvaS1mcmVxdWVuY3ktZGVmaW5pdGlvbic7XG5pbXBvcnQgeyBJUmVwZWF0ZXJSYXcgfSBmcm9tICdAaW50ZXJmYWNlcy9pLXJlcGVhdGVyLXJhdyc7XG5cbmNvbnN0IGxvZzogKC4uLm1zZzogYW55W10pID0+IHZvaWQgPSBjcmVhdGVMb2coJ0dlbmVyYXRlIEZyZXF1ZW5jaWVzJyk7XG5sZXQgZnJlcXVlbmNpZXM6IElSZXBlYXRlclJhd1tdID0gW107XG5jb25zdCByYW5nZTJtOiBJRnJlcXVlbmN5RGVmaW5pdGlvbltdID0gW1xuICAvLyBDaGFubmVsc1xuICB7IHN0YXJ0OiAxNDYuNCwgZW5kOiAxNDYuNTk1LCBzdGVwczogWzAuMDE1XSwgbmFtZTogYEZNIFZvaWNlYCB9LFxuICB7IHN0YXJ0OiAxNDcuNDIsIGVuZDogMTQ3LjU4NSwgc3RlcHM6IFswLjAxNV0sIG5hbWU6IGBGTSBWb2ljZWAgfSxcblxuICAvLyBSYW5nZVxuICB7IHN0YXJ0OiAxNDQuOSwgZW5kOiAxNDUuMSwgc3RlcHM6IFswLjAxNV0sIG5hbWU6IGBXZWFrIFNpZ25hbCwgRk0sIERpZ2l0YWwvUGFja2V0YCB9LFxuICB7IHN0YXJ0OiAxNDUuNSwgZW5kOiAxNDUuOCwgc3RlcHM6IFswLjAxNV0sIG5hbWU6IGBNaXNjZWxsYW5lb3VzIGFuZCBFeHBlcmltZW50YWwgTW9kZXNgIH0sXG5dO1xuXG5jb25zdCByYW5nZTEyNW06IElGcmVxdWVuY3lEZWZpbml0aW9uW10gPSBbXG4gIC8vIENoYW5uZWxzXG4gIHsgc3RhcnQ6IDIyMy40LCBlbmQ6IDIyMy41Miwgc3RlcHM6IFswLjAyMF0sIG5hbWU6IGBGTSBWb2ljZWAgfSxcbiAgeyBzdGFydDogMjIyLjE2LCBlbmQ6IDIyMi4yNCwgc3RlcHM6IFswLjAyMF0sIG5hbWU6IGBNaXhlZCBNb2RlYCB9LFxuICB7IHN0YXJ0OiAyMjMuNzIsIGVuZDogMjIzLjg0LCBzdGVwczogWzAuMDIwXSwgbmFtZTogYE1peGVkIE1vZGVgIH0sXG5cbiAgLy8gUmFuZ2VcbiAgeyBzdGFydDogMjIzLjUzLCBlbmQ6IDIyMy42Mywgc3RlcHM6IFswLjAyMF0sIG5hbWU6IGBEaWdpdGFsL1BhY2tldGAgfSxcbl07XG5cbmNvbnN0IHJhbmdlNzBjbTogSUZyZXF1ZW5jeURlZmluaXRpb25bXSA9IFtcbiAgLy8gQ2hhbm5lbHNcbiAgeyBzdGFydDogNDQwLjcsIGVuZDogNDQxLjMsIHN0ZXBzOiBbMC4wMjVdLCBuYW1lOiBgTWl4ZWQgTW9kZWAgfSxcbiAgeyBzdGFydDogNDQ1LjcsIGVuZDogNDQ2LjI3NSwgc3RlcHM6IFswLjAyNV0sIG5hbWU6IGBGTSBWb2ljZWAgfSxcbiAgeyBzdGFydDogNDQ2LjIsIGVuZDogNDQ2LjMsIHN0ZXBzOiBbMC4wMTI1XSwgbmFtZTogYERpZ2l0YWwgVm9pY2UgTmFycm93YmFuZGAgfSxcblxuICAvLyBSYW5nZVxuICB7IHN0YXJ0OiA0MzQuNSwgZW5kOiA0MzUsIHN0ZXBzOiBbMC4wMjVdLCBuYW1lOiBgTWl4ZWQgTW9kZSBEaWdpdGFsIGFuZCBWb2ljZWAgfSxcbiAgeyBzdGFydDogNDM5LjUsIGVuZDogNDQwLCBzdGVwczogWzAuMDI1XSwgbmFtZTogYE1peGVkIE1vZGUgRGlnaXRhbCBhbmQgVm9pY2VgIH0sXG5dO1xuXG5bLi4ucmFuZ2UybSwgLi4ucmFuZ2UxMjVtLCAuLi5yYW5nZTcwY21dLmZvckVhY2goKHJhbmdlOiBJRnJlcXVlbmN5RGVmaW5pdGlvbikgPT4ge1xuICByYW5nZS5zdGVwcy5mb3JFYWNoKChzdGVwOiBudW1iZXIpID0+IHtcbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSByYW5nZS5zdGFydDsgaSA8PSByYW5nZS5lbmQ7IGkgKz0gc3RlcCkge1xuICAgICAgaSA9IE1hdGgucm91bmQoaSAqIDEwMDAwMCkgLyAxMDAwMDA7XG4gICAgICBpZiAoIWZyZXF1ZW5jaWVzLmZpbmQoKGY6IElSZXBlYXRlclJhdykgPT4gZi5GcmVxdWVuY3kgPT09IGkpKSB7XG4gICAgICAgIGZyZXF1ZW5jaWVzLnB1c2goeyBGcmVxdWVuY3k6IGksIE5hbWU6IHJhbmdlLm5hbWUgfSBhcyBhbnkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59KTtcbmZyZXF1ZW5jaWVzID0gZnJlcXVlbmNpZXMuc29ydCgoYTogSVJlcGVhdGVyUmF3LCBiOiBJUmVwZWF0ZXJSYXcpID0+IChhLkZyZXF1ZW5jeSB8fCAwKSAtIChiLkZyZXF1ZW5jeSB8fCAwKSk7XG5sb2coZnJlcXVlbmNpZXMsIGZyZXF1ZW5jaWVzLmxlbmd0aCk7XG53cml0ZUZpbGVBc3luYyhgLi9kYXRhL2ZyZXF1ZW5jaWVzLmpzb25gLCBKU09OLnN0cmluZ2lmeShmcmVxdWVuY2llcywgbnVsbCwgMikpXG4gIC50aGVuKChyOiB1bmtub3duKSA9PiBsb2coYERvbmVgLCByKSk7XG4iXX0=