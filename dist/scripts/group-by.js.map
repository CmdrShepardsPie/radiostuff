{"version":3,"file":"group-by.js","sourceRoot":"","sources":["../../src/scripts/group-by.ts"],"names":[],"mappings":"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","sourcesContent":["\n\nimport { readFileAsync, writeToJsonAndCsv } from '@helpers/fs-helpers';\nimport { numberToString } from '@helpers/helpers';\nimport { createLog } from '@helpers/log-helpers';\nimport { IRepeaterRaw } from '@interfaces/i-repeater-raw';\nimport chalk from 'chalk';\n\nconst log: (...msg: any[]) => void = createLog('Group By');\n\nasync function doIt(groupBy: keyof IRepeaterRaw, inFileName: string, outFileName: string): Promise<void> {\n  const fileData: Buffer = await readFileAsync(inFileName); // await getAllFilesFromDirectory(\"./repeaters/data/CO/\", \".json\") as IRepeater[];\n  const repeaters: IRepeaterRaw[] = JSON.parse(fileData.toString());\n\n  // Only grouping by the keys in the first row. It's not comprehensive but contains the essentials.\n  // const keys = Object.keys(repeaters[0]) as Array<keyof IRepeater>;\n  // for (const key of keys) {\n  log(chalk.green('Process'), chalk.blue('Group'), groupBy, chalk.yellow('In'), inFileName, chalk.cyan('Out'), outFileName);\n  const grouped: IRepeaterRaw[] = group(groupBy, repeaters);\n  await writeToJsonAndCsv(outFileName, grouped);\n  // }\n}\n\nfunction group(groupBy: keyof IRepeaterRaw, repeaters: IRepeaterRaw[]): IRepeaterRaw[] {\n  const keyedGroups: { [ key: string ]: IRepeaterRaw[] } = {};\n  repeaters.forEach((repeater: IRepeaterRaw) => {\n    const keyVal: number | undefined | string = repeater[groupBy];\n    if (keyVal !== undefined && keyVal !== null && keyVal !== '') {\n      if (!keyedGroups[keyVal]) {\n        keyedGroups[keyVal] = [];\n      }\n      keyedGroups[keyVal].push(repeater);\n    }\n  });\n  const sorting: Array<[string, IRepeaterRaw[]]> = Object.entries(keyedGroups);\n  sorting.sort((a: [string, IRepeaterRaw[]], b: [string, IRepeaterRaw[]]) => {\n    const aMi: string = numberToString(a[1][0].Mi || 0, 5, 24);\n    const bMi: string = numberToString(b[1][0].Mi || 0, 5, 24);\n    const aNumRepeaters: string = numberToString(100 - a[1].length, 4, 1);\n    const bNumRepeaters: string = numberToString(100 - b[1].length, 4, 1);\n    const aGroupName: string = a[0];\n    const bGroupName: string = b[0];\n    const aFrequency: string = numberToString(a[1][0].Frequency || 0, 4, 5);\n    const bFrequency: string = numberToString(b[1][0].Frequency || 0, 4, 5);\n    // Sort by distance, then number of repeaters in group, then group name\n    const aStr: string = `${aMi} ${aNumRepeaters} ${aGroupName} ${aFrequency}`;\n    const bStr: string = `${bMi} ${bNumRepeaters} ${bGroupName} ${bFrequency}`;\n    // Sort by number of repeaters in group, then distance, then group name\n    // const aStr = `${aNumRepeaters} ${aMi} ${aGroupName} ${aFrequency}`;\n    // const bStr = `${bNumRepeaters} ${bMi} ${bGroupName} ${bFrequency}`;\n\n    return aStr > bStr ? 1 : aStr < bStr ? -1 : 0;\n  });\n  return sorting.reduce((prev: IRepeaterRaw[], curr: [string, IRepeaterRaw[]]) => [...prev, ...curr[1]], [] as IRepeaterRaw[]);\n}\n\nasync function start(): Promise<void> {\n  // await doIt(\"Call\", \"repeaters/data/CO/Colorado Springs.json\", \"repeaters/groups/CO/Colorado Springs - Call\");\n  // await doIt(\"Call\", \"repeaters/data/CO/Colorado Springs.json\", \"repeaters/groups/CO/Colorado Springs - Call\");\n  // const coFiles = (await readdirAsync(\"data/repeaters/results/CO/\")).map((f) => `CO/${f}`);\n  // const utFiles = (await readdirAsync(\"./repeaters/data/UT/\")).map((f) => `UT/${f}`);\n  // const nmFiles = (await readdirAsync(\"./repeaters/data/NM/\")).map((f) => `NM/${f}`);\n  // const allFiles = /* [...coFiles, ...utFiles, ...nmFiles] */ coFiles.filter((f) => /\\.json$/.test(f)).map((f) => f.replace(\".json\", \"\"));\n  // for (const file of allFiles) {\n  //   await doIt(\"Call\", `repeaters/data/${file}.json`, `repeaters/groups/${file} - Call`);\n  // }\n  // await doIt(\"Colorado Springs\");\n  // await doIt(\"Denver\");\n  // await doIt(\"Grand Junction\");\n  // await doIt(\"Call\",\n  //   `data/repeaters/results/CO/Colorado Springs.json`,\n  //   `data/repeaters/groups/CO/Colorado Springs - Call`);\n  await doIt('Call',\n    `data/repeaters/combined/CO.json`,\n    `data/repeaters/groups/combined/CO - Call`);\n}\n\nexport default start();\n"]}