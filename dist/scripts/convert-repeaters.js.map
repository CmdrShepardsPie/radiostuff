{"version":3,"file":"convert-repeaters.js","sourceRoot":"","sources":["../../src/scripts/convert-repeaters.ts"],"names":[],"mappings":"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","sourcesContent":["import 'module-alias/register';\n\nimport { getAllFilesFromDirectory, writeToJsonAndCsv } from '@helpers/fs-helpers';\nimport { createLog } from '@helpers/log-helpers';\nimport { IRepeaterRaw } from '@interfaces/i-repeater-raw';\nimport {\n  IRepeaterDigitalModes,\n  IRepeaterStructured,\n  IRepeaterVOIPModes,\n  RepeaterStatus,\n  RepeaterUse,\n} from '@interfaces/i-repeater-structured';\n\nconst log: (...msg: any[]) => void = createLog('Convert Repeaters');\n\nexport default (async (): Promise<void> => {\n  const raw: IRepeaterRaw[][] = await getAllFilesFromDirectory('data/repeaters/results/CO');\n  log('Got', raw.length, 'files');\n  const ids: number[] = [];\n  const converted: IRepeaterStructured[] = raw\n    .reduce((output: IRepeaterStructured[], input: IRepeaterRaw[], index: number) => {\n      log('Got', input.length, 'repeaters from file', index + 1);\n      return [...output, ...input.map(convertRepeater)];\n    }, [])\n    .filter((repeater: IRepeaterStructured) => {\n      if (ids.includes(repeater.ID)) {\n        return false;\n      } else {\n        ids.push(repeater.ID);\n        return true;\n      }\n    });\n  log('Converted', converted.length, 'repeaters');\n  await writeToJsonAndCsv('data/repeaters/converted/CO', converted);\n})();\n\nfunction convertRepeater(raw: IRepeaterRaw): IRepeaterStructured {\n  return {\n    ID: convertNumber(raw.ID) as number,\n    StateID: convertNumber(raw.state_id) as number,\n    Callsign: raw.Call,\n    Location: { Latitude: raw.Latitude, Longitude: raw.Longitude, County: raw.County, State: raw['ST/PR'], Local: raw.Location },\n    Use: convertRepeaterUse(raw.Use),\n    Status: convertRepeaterStatus(raw['Op Status']),\n    Frequency: { Input: convertNumber(raw.Uplink) || (raw.Downlink + raw.Offset), Output: raw.Downlink },\n    SquelchTone: convertRepeaterSquelchTone(raw['Uplink Tone'], raw['Downlink Tone']),\n    DigitalTone: convertRepeaterDigitalTone(raw['Uplink Tone'], raw['Downlink Tone']),\n    Digital: convertRepeaterDigitalData(raw),\n    VOIP: convertRepeaterVOIP(raw),\n  };\n}\n\nfunction convertRepeaterUse(raw: string): RepeaterUse {\n  switch (raw.toLowerCase()) {\n    case 'open':\n      return RepeaterUse.Open;\n    case 'closed':\n      return RepeaterUse.Closed;\n    case 'private':\n      return RepeaterUse.Private;\n    default:\n      return RepeaterUse.Other;\n  }\n}\n\nfunction convertRepeaterStatus(raw: string | undefined): RepeaterStatus {\n  if (!raw) {\n    return RepeaterStatus.Other;\n  }\n  switch (raw.toLowerCase()) {\n    case 'on-air':\n      return RepeaterStatus.OnAir;\n    case 'off-air':\n      return RepeaterStatus.OffAir;\n    case 'testing':\n      return RepeaterStatus.Testing;\n    case 'unknown':\n      return RepeaterStatus.Unknown;\n    default:\n      return RepeaterStatus.Other;\n  }\n}\n\nfunction convertRepeaterSquelchTone(rawInput: string | number | undefined, rawOutput: string | number | undefined): { Input?: number; Output?: number } | undefined {\n  if (!rawInput && !rawOutput) {\n    return undefined;\n  }\n  const converted: { Input: number | undefined; Output: number | undefined } = {\n    Input: convertNumber(rawInput),\n    Output: convertNumber(rawOutput),\n  };\n  if (converted.Input || converted.Output) {\n    return converted;\n  }\n  return undefined;\n}\n\nfunction convertRepeaterDigitalTone(rawInput: string | number | undefined, rawOutput: string | number | undefined): { Input?: number; Output?: number } | undefined {\n  if (!rawInput && !rawOutput) {\n    return undefined;\n  }\n  const digitalFilter: RegExp = /^D(\\d+)$/;\n  const converted: { Input: number | undefined; Output: number | undefined } = {\n    Input: typeof rawInput === 'string' ? convertNumber(rawInput, digitalFilter) : undefined,\n    Output: typeof rawOutput === 'string' ? convertNumber(rawOutput, digitalFilter) : undefined,\n  };\n  if (converted.Input || converted.Output) {\n    return converted;\n  }\n  return undefined;\n}\n\nfunction convertNumber(input: string | number | undefined, numberFilter: RegExp = /^([+-]?\\d+\\.?\\d*)$/): number | undefined {\n  if (typeof input === 'number' && !isNaN(input)) {\n    return input;\n  } else if (typeof input === 'number' && isNaN(input)) {\n    return undefined;\n  } else if (typeof input === 'string' && numberFilter.test(input)) {\n    const match: RegExpMatchArray | null = input.match(numberFilter);\n    if (match && match[1]) {\n      const converted: number = parseFloat(match[1]);\n      return !isNaN(converted) ? converted : undefined;\n    }\n  }\n}\n\nfunction convertRepeaterDigitalData(raw: IRepeaterRaw): IRepeaterDigitalModes | undefined {\n  const converted: IRepeaterDigitalModes = {\n    // TODO: ATV?: boolean;\n    DMR: (raw.DGTL.includes('D') || raw['DMR Enabled']) ? { ColorCode: convertNumber(raw['Color Code']), ID: convertNumber(raw['DMR ID']) } : undefined,\n    P25: (raw.DGTL.includes('P') || raw['P-25 Digital Enabled']) ? { NAC: convertNumber(raw.NAC) } : undefined,\n    DStar: (raw.DGTL.includes('S') || raw['D-STAR Enabled']) ? { Node: raw.Node } : undefined,\n    YSF: (raw.DGTL.includes('Y') || raw['YSF Digital Enabled']) ? {\n      GroupID: {\n        Input: typeof raw['DG-ID'] === 'number' ? raw['DG-ID'] : typeof raw['DG-ID'] === 'string' ? raw['DG-ID'].split('/')[0].trim() : undefined,\n        Output: typeof raw['DG-ID'] === 'number' ? raw['DG-ID'] : typeof raw['DG-ID'] === 'string' ? raw['DG-ID'].split('/')[1].trim() : undefined,\n      },\n    } : undefined,\n  };\n  if (converted.DMR || converted.P25 || converted.DStar || converted.YSF) {\n    return converted;\n  }\n}\n\nfunction convertRepeaterVOIP(raw: IRepeaterRaw): IRepeaterVOIPModes | undefined {\n  const converted: IRepeaterVOIPModes = {\n    AllStar: (raw.VOIP.includes('A') || raw.AllStar) ? { NodeID: convertNumber(raw.AllStar) } : undefined,\n    EchoLink: (raw.VOIP.includes('E') || raw.EchoLink) ? {\n      NodeID: raw.EchoLink,\n    } : undefined, // TODO: Status?: EchoLinkNodeStatus\n    IRLP: (raw.VOIP.includes('I') || raw.IRLP) ? { NodeID: convertNumber(raw.IRLP) } : undefined,\n    Wires: (raw.VOIP.includes('W') || raw['WIRES-X']) ? { ID: convertNumber(raw['WIRES-X']) } : undefined,\n  };\n  if (converted.AllStar || converted.EchoLink || converted.IRLP || converted.Wires) {\n    return converted;\n  }\n}\n"]}