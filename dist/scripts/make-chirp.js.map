{"version":3,"file":"make-chirp.js","sourceRoot":"","sources":["../../src/scripts/make-chirp.ts"],"names":[],"mappings":"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","sourcesContent":["import 'module-alias/register';\n\nimport { readFileAsync, writeToJsonAndCsv } from '@helpers/fs-helpers';\nimport { createLog } from '@helpers/log-helpers';\nimport { ChirpDuplex, ChirpMode, ChirpTone, IChirp } from '@interfaces/i-chirp';\nimport { IRepeaterStructured, RepeaterStatus, RepeaterUse } from '@interfaces/i-repeater-structured';\nimport { ISimplexFrequency } from '@interfaces/i-simplex-frequency';\nimport gpsDistance, { Point } from 'gps-distance';\n\nconst log: (...msg: any[]) => void = createLog('Make Chirp');\n\nconst chirp: IChirp = {\n  Location: null as any,\n  Name: '',\n  Frequency: null as any,\n  Duplex: '',\n  Offset: null as any,\n  Tone: '',\n  rToneFreq: null as any,\n  cToneFreq: null as any,\n  DtcsCode: null as any,\n  DtcsRxCode: null as any,\n  DtcsPolarity: 'NN',\n  Mode: 'FM',\n  TStep: 5,\n  Comment: '',\n};\n\nconst myPoint: Point = [39.627071500, -104.893322500]; // 4982 S Ulster St\n\nasync function doIt(inFileName: string, outFileName: string): Promise<void> {\n  const simplex: IRepeaterStructured[] =\n    JSON.parse((await readFileAsync('data/frequencies.json')).toString())\n      .map((map: ISimplexFrequency) =>\n        ({ Callsign: map.Name, Frequency: { Output: map.Frequency, Input: map.Frequency } }))\n      .filter((filter: IRepeaterStructured) => /FM|Voice|Simplex/i.test(filter.Callsign))\n      .filter((filter: IRepeaterStructured) => !(/Data|Digital|Packet/i.test(filter.Callsign)));\n\n  const repeaters: IRepeaterStructured[] =\n    JSON.parse((await readFileAsync(inFileName)).toString());\n\n  repeaters.forEach((each: IRepeaterStructured) => {\n    each.Location.Distance = gpsDistance([myPoint, [each.Location.Latitude, each.Location.Longitude]]);\n  });\n\n  repeaters.sort((a: IRepeaterStructured, b: IRepeaterStructured) =>\n    a.Location.Distance! > b.Location.Distance! ? 1 :\n      a.Location.Distance! < b.Location.Distance! ? -1 : 0);\n  const mapped: IChirp[] = [\n    ...simplex,\n    ...repeaters\n      .filter((filter: IRepeaterStructured) =>\n        (filter.Frequency.Output >= 144 && filter.Frequency.Output <= 148) ||\n        (filter.Frequency.Output >= 222 && filter.Frequency.Output <= 225) ||\n        (filter.Frequency.Output >= 420 && filter.Frequency.Output <= 450))\n      .filter((filter: IRepeaterStructured) =>\n        !filter.Digital &&\n        filter.Status !== RepeaterStatus.OffAir &&\n        filter.Use === RepeaterUse.Open),\n  ]\n    .map((map: IRepeaterStructured, index: number): IChirp => ({ ...convertToRadio(map), Location: index }))\n    .slice(0, 200)\n    .sort((a: IChirp, b: IChirp) => a.Frequency - b.Frequency)\n    .map((map: IChirp, index: number): IChirp => ({ ...map, Location: index }));\n\n  return writeToJsonAndCsv(outFileName, mapped);\n}\n\nfunction convertToRadio(repeater: IRepeaterStructured): IChirp {\n  let Name: string = '';\n\n  if (repeater.Callsign) {\n    Name += repeater.Callsign.trim();\n    if (repeater.ID !== undefined) {\n      Name = Name.substr(-3).trim().toUpperCase();\n    }\n  }\n\n  if (repeater.Location && repeater.Location.Local) {\n    Name += (Name ? ' ' : '') + repeater.Location.Local.trim().toLowerCase();\n  }\n\n  if (repeater.Frequency && repeater.Frequency.Output) {\n    Name += (Name ? ' ' : '') + repeater.Frequency.Output.toString().trim();\n  }\n\n  Name = Name.replace(/[^0-9.a-zA-Z\\/]/g, '').trim();\n  Name = Name.substring(0, 7).trim();\n\n  const Frequency: number = repeater.Frequency.Output;\n  let Offset: number = repeater.Frequency.Input - repeater.Frequency.Output;\n  const Duplex: ChirpDuplex = Offset > 0 ? '+' : Offset < 0 ? '-' : '';\n  Offset = Math.abs(Math.round(Offset * 100) / 100);\n  let rToneFreq: number | undefined = (repeater.SquelchTone && repeater.SquelchTone.Input);\n  let cToneFreq: number | undefined = (repeater.SquelchTone && repeater.SquelchTone.Output);\n  let DtcsCode: number | undefined = (repeater.DigitalTone && repeater.DigitalTone.Input);\n  let DtcsRxCode: number | undefined = (repeater.DigitalTone && repeater.DigitalTone.Output);\n  let Tone: ChirpTone = '';\n  const Mode: ChirpMode = 'FM';\n  let Comment: string = `${repeater.StateID} ${repeater.ID} ${repeater.Location && repeater.Location.Distance && repeater.Location.Distance.toFixed(2)} ${repeater.Location && repeater.Location.State} ${repeater.Location && repeater.Location.County} ${repeater.Location && repeater.Location.Local} ${repeater.Callsign}`;\n  Comment = Comment.replace(/undefined/g, ' ').replace(/\\s+/g, ' ').trim();\n  // `${item['ST/PR'] || ''} ${item.County || ''} ${item.Location || ''} ${item.Call || ''} ${item.Sponsor || ''} ${item.Affiliate || ''} ${item.Frequency} ${item.Use || ''} ${item['Op Status'] || ''} ${item.Comment || ''}`.replace(/\\s+/g, ' ');\n  // Comment = Comment.trim().replace(\",\", \"\").substring(0, 31).trim();\n\n  if (rToneFreq) {\n    Tone = 'Tone';\n  } else if (DtcsCode) {\n    Tone = 'DTCS';\n  }\n\n  if (cToneFreq) {\n    Tone = 'TSQL';\n  } else if (DtcsRxCode) {\n    Tone = 'DTCS';\n  }\n\n  if ((rToneFreq && cToneFreq && (rToneFreq !== cToneFreq))) {\n    Tone = 'Cross';\n  }\n\n  cToneFreq = cToneFreq || 88.5;\n  rToneFreq = rToneFreq || 88.5;\n  DtcsCode = DtcsCode || 23;\n  DtcsRxCode = DtcsRxCode || 23;\n\n// log(chalk.green(\"Made Row\"), row);\n  return {\n    ...chirp,\n// Location,\n    Name,\n    Frequency,\n    Duplex,\n    Offset,\n    rToneFreq,\n    cToneFreq,\n    DtcsCode,\n    DtcsRxCode,\n    Tone,\n    Mode,\n    Comment,\n  };\n}\n\nasync function start(): Promise<void> {\n// const coFiles = (await readdirAsync(\"./repeaters/data/CO/\")).map((f) => `data/CO/${f}`);\n// const utFiles = (await readdirAsync(\"./repeaters/data/UT/\")).map((f) => `data/UT/${f}`);\n// const nmFiles = (await readdirAsync(\"./repeaters/data/NM/\")).map((f) => `data/NM/${f}`);\n// const coGroups = (await readdirAsync(\"./repeaters/groups/CO/\")).map((f) => `groups/CO/${f}`);\n// const utGroups = (await readdirAsync(\"./repeaters/groups/UT/\")).map((f) => `groups/UT/${f}`);\n// const nmGroups = (await readdirAsync(\"./repeaters/groups/NM/\")).map((f) => `groups/NM/${f}`);\n// const allFiles = [...coFiles, ...utFiles, ...nmFiles, ...coGroups, ...utGroups, ...nmGroups].filter((f) => /\\.json$/.test(f)).map((f) => f.replace(\".json\", \"\"));\n// for (const file of allFiles) {\n//   await doIt(file);\n// }\n\n// await doIt(\"data/repeaters/groups/CO/Colorado Springs - Call.json\", \"data/repeaters/chirp/groups/CO/Colorado Springs - Call\");\n// await doIt(\"data/repeaters/results/CO/Colorado Springs.json\", \"data/repeaters/chirp/CO/Colorado Springs\");\n  await doIt('data/repeaters/converted/CO.json', 'data/repeaters/chirp/CO');\n  // await doIt('data/repeaters/groups/combined/CO - Call.json', 'data/repeaters/chirp/groups/CO - Call');\n}\n\nexport default start();\n"]}