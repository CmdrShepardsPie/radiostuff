"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("module-alias/register");
const csv_helpers_1 = require("@helpers/csv-helpers");
const fs_helpers_1 = require("@helpers/fs-helpers");
const helpers_1 = require("@helpers/helpers");
const log_helpers_1 = require("@helpers/log-helpers");
const chalk_1 = require("chalk");
const scraper_1 = require("./modules/scraper");
const log = log_helpers_1.createLog("Get Repeaters");
async function save(place, distance) {
    log(chalk_1.default.green("Save"), place, distance);
    const scraper = new scraper_1.default(place, distance);
    const result = await scraper.process();
    const columns = {};
    result.forEach((row) => {
        Object.entries(row).forEach((entry) => {
            const key = entry[0];
            const value = entry[1];
            if (!columns[key]) {
                columns[key] = [];
            }
            if (columns[key].indexOf(value) === -1) {
                columns[key].push(value);
            }
        });
    });
    result.forEach((row) => {
        Object.entries(row).forEach((entry) => {
            const key = entry[0];
            const value = entry[1];
            if (columns[key].length === 1 && columns[key][0] === "" && value === "") {
                // @ts-ignore
                row[key] = "yes";
            }
        });
    });
    result.sort((a, b) => {
        const aMi = helpers_1.numberToString(a.Mi, 4, 5);
        const bMi = helpers_1.numberToString(b.Mi, 4, 5);
        const aName = a.Call;
        const bName = b.Call;
        const aFrequency = helpers_1.numberToString(a.Frequency, 4, 5);
        const bFrequency = helpers_1.numberToString(b.Frequency, 4, 5);
        const aStr = `${aMi} ${aName} ${aFrequency}`;
        const bStr = `${bMi} ${bName} ${bFrequency}`;
        return aStr > bStr ? 1 : aStr < bStr ? -1 : 0;
    });
    // result.sort((a: any, b: any) => {(a.Call > b.Call ? 1 : a.Call < b.Call ? -1 : 0));
    // result.sort((a: any, b: any) => (a.Frequency - b.Frequency));
    // result.sort((a: any, b: any) => (a.Mi - b.Mi));
    // console.log(place, distance, result.length);
    const parts = place.toString().split(`,`);
    const subPlace = `${(parts[1] || ".").trim()}/${parts[0].trim()}`;
    log(chalk_1.default.yellow("Results"), result.length, subPlace);
    await fs_helpers_1.writeToJsonAndCsv(`data/repeaters/results/${subPlace}`, result);
}
exports.default = (async () => {
    const countyFileData = await fs_helpers_1.readFileAsync("data/Colorado_County_Seats.csv");
    const countyData = await csv_helpers_1.parseAsync(countyFileData, { columns: true });
    const cities = countyData.map((c) => `${c["County Seat"]}, CO`);
    while (cities.length) {
        const name = cities.shift();
        if (name) {
            await save(name, 200);
        }
    }
})();
// export default start();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXJlcGVhdGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2dldC1yZXBlYXRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBK0I7QUFFL0Isc0RBQWdEO0FBQ2hELG9EQUFxRTtBQUNyRSw4Q0FBZ0Q7QUFDaEQsc0RBQStDO0FBQy9DLGlDQUEwQjtBQUMxQiwrQ0FBd0M7QUFFeEMsTUFBTSxHQUFHLEdBQUcsdUJBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUV2QyxLQUFLLFVBQVUsSUFBSSxDQUFDLEtBQXNCLEVBQUUsUUFBZ0I7SUFDMUQsR0FBRyxDQUFDLGVBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTFDLE1BQU0sT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFN0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFdkMsTUFBTSxPQUFPLEdBQVEsRUFBRSxDQUFDO0lBQ3hCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUNyQixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3BDLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUNuQjtZQUNELElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFB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QUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2RSxNQUFNLE1BQU0sR0FBYSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0UsT0FBTyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ3BCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM1QixJQUFJLElBQUksRUFBRTtZQUNSLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIm1vZHVsZS1hbGlhcy9yZWdpc3RlclwiO1xuXG5pbXBvcnQge3BhcnNlQXN5bmN9IGZyb20gXCJAaGVscGVycy9jc3YtaGVscGVyc1wiO1xuaW1wb3J0IHtyZWFkRmlsZUFzeW5jLCB3cml0ZVRvSnNvbkFuZENzdn0gZnJvbSBcIkBoZWxwZXJzL2ZzLWhlbHBlcnNcIjtcbmltcG9ydCB7bnVtYmVyVG9TdHJpbmd9IGZyb20gXCJAaGVscGVycy9oZWxwZXJzXCI7XG5pbXBvcnQge2NyZWF0ZUxvZ30gZnJvbSBcIkBoZWxwZXJzL2xvZy1oZWxwZXJzXCI7XG5pbXBvcnQgY2hhbGsgZnJvbSBcImNoYWxrXCI7XG5pbXBvcnQgU2NyYXBlciBmcm9tIFwiLi9tb2R1bGVzL3NjcmFwZXJcIjtcblxuY29uc3QgbG9nID0gY3JlYXRlTG9nKFwiR2V0IFJlcGVhdGVyc1wiKTtcblxuYXN5bmMgZnVuY3Rpb24gc2F2ZShwbGFjZTogc3RyaW5nIHwgbnVtYmVyLCBkaXN0YW5jZTogbnVtYmVyKSB7XG4gIGxvZyhjaGFsay5ncmVlbihcIlNhdmVcIiksIHBsYWNlLCBkaXN0YW5jZSk7XG5cbiAgY29uc3Qgc2NyYXBlciA9IG5ldyBTY3JhcGVyKHBsYWNlLCBkaXN0YW5jZSk7XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NyYXBlci5wcm9jZXNzKCk7XG5cbiAgY29uc3QgY29sdW1uczogYW55ID0ge307XG4gIHJlc3VsdC5mb3JFYWNoKChyb3cpID0+IHtcbiAgICBPYmplY3QuZW50cmllcyhyb3cpLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBlbnRyeVswXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gZW50cnlbMV07XG4gICAgICBpZiAoIWNvbHVtbnNba2V5XSkge1xuICAgICAgICBjb2x1bW5zW2tleV0gPSBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChjb2x1bW5zW2tleV0uaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgICAgIGNvbHVtbnNba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcmVzdWx0LmZvckVhY2goKHJvdykgPT4ge1xuICAgIE9iamVjdC5lbnRyaWVzKHJvdykuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IGVudHJ5WzBdO1xuICAgICAgY29uc3QgdmFsdWUgPSBlbnRyeVsxXTtcbiAgICAgIGlmIChjb2x1bW5zW2tleV0ubGVuZ3RoID09PSAxICYmIGNvbHVtbnNba2V5XVswXSA9PT0gXCJcIiAmJiB2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJvd1trZXldID0gXCJ5ZXNcIjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcmVzdWx0LnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCBhTWkgPSBudW1iZXJUb1N0cmluZyhhLk1pLCA0LCA1KTtcbiAgICBjb25zdCBiTWkgPSBudW1iZXJUb1N0cmluZyhiLk1pLCA0LCA1KTtcbiAgICBjb25zdCBhTmFtZSA9IGEuQ2FsbDtcbiAgICBjb25zdCBiTmFtZSA9IGIuQ2FsbDtcbiAgICBjb25zdCBhRnJlcXVlbmN5ID0gbnVtYmVyVG9TdHJpbmcoYS5GcmVxdWVuY3ksIDQsIDUpO1xuICAgIGNvbnN0IGJGcmVxdWVuY3kgPSBudW1iZXJUb1N0cmluZyhiLkZyZXF1ZW5jeSwgNCwgNSk7XG4gICAgY29uc3QgYVN0ciA9IGAke2FNaX0gJHthTmFtZX0gJHthRnJlcXVlbmN5fWA7XG4gICAgY29uc3QgYlN0ciA9IGAke2JNaX0gJHtiTmFtZX0gJHtiRnJlcXVlbmN5fWA7XG4gICAgcmV0dXJuIGFTdHIgPiBiU3RyID8gMSA6IGFTdHIgPCBiU3RyID8gLTEgOiAwO1xuICB9KTtcbiAgLy8gcmVzdWx0LnNvcnQoKGE6IGFueSwgYjogYW55KSA9PiB7KGEuQ2FsbCA+IGIuQ2FsbCA/IDEgOiBhLkNhbGwgPCBiLkNhbGwgPyAtMSA6IDApKTtcbiAgLy8gcmVzdWx0LnNvcnQoKGE6IGFueSwgYjogYW55KSA9PiAoYS5GcmVxdWVuY3kgLSBiLkZyZXF1ZW5jeSkpO1xuICAvLyByZXN1bHQuc29ydCgoYTogYW55LCBiOiBhbnkpID0+IChhLk1pIC0gYi5NaSkpO1xuXG4gIC8vIGNvbnNvbGUubG9nKHBsYWNlLCBkaXN0YW5jZSwgcmVzdWx0Lmxlbmd0aCk7XG5cbiAgY29uc3QgcGFydHMgPSBwbGFjZS50b1N0cmluZygpLnNwbGl0KGAsYCk7XG4gIGNvbnN0IHN1YlBsYWNlID0gYCR7KHBhcnRzWzFdIHx8IFwiLlwiKS50cmltKCl9LyR7cGFydHNbMF0udHJpbSgpfWA7XG5cbiAgbG9nKGNoYWxrLnllbGxvdyhcIlJlc3VsdHNcIiksIHJlc3VsdC5sZW5ndGgsIHN1YlBsYWNlKTtcblxuICBhd2FpdCB3cml0ZVRvSnNvbkFuZENzdihgZGF0YS9yZXBlYXRlcnMvcmVzdWx0cy8ke3N1YlBsYWNlfWAsIHJlc3VsdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IChhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGNvdW50eUZpbGVEYXRhID0gYXdhaXQgcmVhZEZpbGVBc3luYyhcImRhdGEvQ29sb3JhZG9fQ291bnR5X1NlYXRzLmNzdlwiKTtcbiAgY29uc3QgY291bnR5RGF0YSA9IGF3YWl0IHBhcnNlQXN5bmMoY291bnR5RmlsZURhdGEsIHsgY29sdW1uczogdHJ1ZSB9KTtcbiAgY29uc3QgY2l0aWVzOiBzdHJpbmdbXSA9IGNvdW50eURhdGEubWFwKChjOiBhbnkpID0+IGAke2NbXCJDb3VudHkgU2VhdFwiXX0sIENPYCk7XG4gIHdoaWxlIChjaXRpZXMubGVuZ3RoKSB7XG4gICAgY29uc3QgbmFtZSA9IGNpdGllcy5zaGlmdCgpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICBhd2FpdCBzYXZlKG5hbWUsIDIwMCk7XG4gICAgfVxuICB9XG59KSgpO1xuXG4vLyBleHBvcnQgZGVmYXVsdCBzdGFydCgpO1xuIl19