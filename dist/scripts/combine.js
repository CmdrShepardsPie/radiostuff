"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("module-alias/register");
const fs_helpers_1 = require("@helpers/fs-helpers");
const helpers_1 = require("@helpers/helpers");
const log_helpers_1 = require("@helpers/log-helpers");
const log = log_helpers_1.createLog("Combine");
exports.default = (async () => {
    const myPoint = [39.6268703, -104.8957382];
    const combined = [];
    const files = await fs_helpers_1.getAllFilesFromDirectory("data/repeaters/results/CO");
    log("Got", files.length, "files");
    const found = {};
    files.forEach((file) => {
        log("Got", file.length, "repeaters");
        file.forEach((item) => {
            if (!found[`${item.state_id}-${item.ID}`]) {
                found[`${item.state_id}-${item.ID}`] = true;
                combined.push(item);
                const x = Math.pow(item.Latitude - myPoint[0], 2);
                const y = Math.pow(item.Longitude - myPoint[1], 2);
                item.Mi = Math.pow(x + y, 1 / 2);
            }
        });
    });
    log("Got", combined.length, "unique repeaters");
    combined.sort((a, b) => {
        const aMi = helpers_1.numberToString(a.Mi * 100, 3, 24);
        const bMi = helpers_1.numberToString(b.Mi * 100, 3, 24);
        const aRepeaterName = a.Call;
        const bRepeaterName = b.Call;
        const aFrequency = helpers_1.numberToString(a.Frequency, 4, 5);
        const bFrequency = helpers_1.numberToString(b.Frequency, 4, 5);
        const aStr = `${aMi} ${aRepeaterName} ${aFrequency}`;
        const bStr = `${bMi} ${bRepeaterName} ${bFrequency}`;
        return aStr > bStr ? 1 : aStr < bStr ? -1 : 0;
    });
    const stats = combined.reduce((result, data) => {
        const freq = Math.round(data.Frequency).toString();
        const pow = Math.pow(10, Math.max(freq.length - 2, 0)) * 2;
        const group = Math.round(data.Frequency / pow) * pow;
        // console.log(freq, pow, group);
        const count = result[group] || 0;
        return { ...result, [group]: count + 1 };
    }, {});
    console.log("STATS", stats);
    // combined.slice(0, 100).forEach((c) => log(c.Call, "\t", c.Latitude, "\t", c.Longitude, "\t", c.Mi));
    await fs_helpers_1.writeToJsonAndCsv("data/repeaters/combined/CO", combined);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYmluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2NvbWJpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBK0I7QUFFL0Isb0RBQWdGO0FBQ2hGLDhDQUFnRDtBQUNoRCxzREFBK0M7QUFFL0MsTUFBTSxHQUFHLEdBQUcsdUJBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUVqQyxrQkFBZSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ3pCLE1BQU0sT0FBTyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0MsTUFBTSxRQUFRLEdBQVUsRUFBRSxDQUFDO0lBQzNCLE1BQU0sS0FBSyxHQUFHLE1BQU0scUNBQXdCLENBQVEsMkJBQTJCLENBQUMsQ0FBQztJQUNqRixHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEMsTUFBTSxLQUFLLEdBQStCLEVBQUUsQ0FBQztJQUM3QyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDckIsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDekMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBQzVDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FB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aWFzL3JlZ2lzdGVyXCI7XG5cbmltcG9ydCB7Z2V0QWxsRmlsZXNGcm9tRGlyZWN0b3J5LCB3cml0ZVRvSnNvbkFuZENzdn0gZnJvbSBcIkBoZWxwZXJzL2ZzLWhlbHBlcnNcIjtcbmltcG9ydCB7bnVtYmVyVG9TdHJpbmd9IGZyb20gXCJAaGVscGVycy9oZWxwZXJzXCI7XG5pbXBvcnQge2NyZWF0ZUxvZ30gZnJvbSBcIkBoZWxwZXJzL2xvZy1oZWxwZXJzXCI7XG5cbmNvbnN0IGxvZyA9IGNyZWF0ZUxvZyhcIkNvbWJpbmVcIik7XG5cbmV4cG9ydCBkZWZhdWx0IChhc3luYyAoKSA9PiB7XG4gIGNvbnN0IG15UG9pbnQgPSBbMzkuNjI2ODcwMywgLTEwNC44OTU3MzgyXTtcbiAgY29uc3QgY29tYmluZWQ6IGFueVtdID0gW107XG4gIGNvbnN0IGZpbGVzID0gYXdhaXQgZ2V0QWxsRmlsZXNGcm9tRGlyZWN0b3J5PGFueVtdPihcImRhdGEvcmVwZWF0ZXJzL3Jlc3VsdHMvQ09cIik7XG4gIGxvZyhcIkdvdFwiLCBmaWxlcy5sZW5ndGgsIFwiZmlsZXNcIik7XG4gIGNvbnN0IGZvdW5kOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSA9IHt9O1xuICBmaWxlcy5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgbG9nKFwiR290XCIsIGZpbGUubGVuZ3RoLCBcInJlcGVhdGVyc1wiKTtcbiAgICBmaWxlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmICghZm91bmRbYCR7aXRlbS5zdGF0ZV9pZH0tJHtpdGVtLklEfWBdKSB7XG4gICAgICAgIGZvdW5kW2Ake2l0ZW0uc3RhdGVfaWR9LSR7aXRlbS5JRH1gXSA9IHRydWU7XG4gICAgICAgIGNvbWJpbmVkLnB1c2goaXRlbSk7XG4gICAgICAgIGNvbnN0IHggPSBNYXRoLnBvdyhpdGVtLkxhdGl0dWRlIC0gbXlQb2ludFswXSwgMik7XG4gICAgICAgIGNvbnN0IHkgPSBNYXRoLnBvdyhpdGVtLkxvbmdpdHVkZSAtIG15UG9pbnRbMV0sIDIpO1xuICAgICAgICBpdGVtLk1pID0gTWF0aC5wb3coeCArIHksIDEgLyAyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIGxvZyhcIkdvdFwiLCBjb21iaW5lZC5sZW5ndGgsIFwidW5pcXVlIHJlcGVhdGVyc1wiKTtcbiAgY29tYmluZWQuc29ydCgoYSwgYikgPT4ge1xuICAgIGNvbnN0IGFNaSA9IG51bWJlclRvU3RyaW5nKGEuTWkgKiAxMDAsIDMsIDI0KTtcbiAgICBjb25zdCBiTWkgPSBudW1iZXJUb1N0cmluZyhiLk1pICogMTAwLCAzLCAyNCk7XG4gICAgY29uc3QgYVJlcGVhdGVyTmFtZSA9IGEuQ2FsbDtcbiAgICBjb25zdCBiUmVwZWF0ZXJOYW1lID0gYi5DYWxsO1xuICAgIGNvbnN0IGFGcmVxdWVuY3kgPSBudW1iZXJUb1N0cmluZyhhLkZyZXF1ZW5jeSwgNCwgNSk7XG4gICAgY29uc3QgYkZyZXF1ZW5jeSA9IG51bWJlclRvU3RyaW5nKGIuRnJlcXVlbmN5LCA0LCA1KTtcbiAgICBjb25zdCBhU3RyID0gYCR7YU1pfSAke2FSZXBlYXRlck5hbWV9ICR7YUZyZXF1ZW5jeX1gO1xuICAgIGNvbnN0IGJTdHIgPSBgJHtiTWl9ICR7YlJlcGVhdGVyTmFtZX0gJHtiRnJlcXVlbmN5fWA7XG5cbiAgICByZXR1cm4gYVN0ciA+IGJTdHIgPyAxIDogYVN0ciA8IGJTdHIgPyAtMSA6IDA7XG4gIH0pO1xuICBjb25zdCBzdGF0cyA9IGNvbWJpbmVkLnJlZHVjZSgocmVzdWx0LCBkYXRhKSA9PiB7XG4gICAgY29uc3QgZnJlcSA9IE1hdGgucm91bmQoZGF0YS5GcmVxdWVuY3kpLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgcG93ID0gTWF0aC5wb3coMTAsIE1hdGgubWF4KGZyZXEubGVuZ3RoIC0gMiwgMCkpICogMjtcbiAgICBjb25zdCBncm91cCA9IE1hdGgucm91bmQoZGF0YS5GcmVxdWVuY3kgLyBwb3cpICogcG93O1xuICAgIC8vIGNvbnNvbGUubG9nKGZyZXEsIHBvdywgZ3JvdXApO1xuICAgIGNvbnN0IGNvdW50ID0gcmVzdWx0W2dyb3VwXSB8fCAwO1xuICAgIHJldHVybiB7Li4ucmVzdWx0LCBbZ3JvdXBdOiBjb3VudCArIDEgfTtcbiAgfSwge30pO1xuICBjb25zb2xlLmxvZyhcIlNUQVRTXCIsIHN0YXRzKTtcbiAgLy8gY29tYmluZWQuc2xpY2UoMCwgMTAwKS5mb3JFYWNoKChjKSA9PiBsb2coYy5DYWxsLCBcIlxcdFwiLCBjLkxhdGl0dWRlLCBcIlxcdFwiLCBjLkxvbmdpdHVkZSwgXCJcXHRcIiwgYy5NaSkpO1xuICBhd2FpdCB3cml0ZVRvSnNvbkFuZENzdihcImRhdGEvcmVwZWF0ZXJzL2NvbWJpbmVkL0NPXCIsIGNvbWJpbmVkKTtcbn0pKCk7XG4iXX0=